^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 1) export abstract class AiApiWrapper {
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 2)   abstract prompt(messages: string[]): Promise<string>;
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 3) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  2) import { DiscussServiceClient } from '@google-ai/generativelanguage';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  3) import { GoogleAuth } from 'google-auth-library';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  4) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  5) export class PalmAiApiWrapper extends AiApiWrapper {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  6)   private MODEL_NAME = 'models/chat-bison-001';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  7)   private PALMAI_KEY = process.env.PALMAI_KEY || '';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  8)   private TEMPERATURE = 0.5;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  9)   private CANDIDATE_COUNT = 1;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 10)   private client: DiscussServiceClient;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 11) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 12)   constructor() {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 13)     super();
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 14)     this.client = new DiscussServiceClient({
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 15)       authClient: new GoogleAuth().fromAPIKey(this.PALMAI_KEY),
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 16)     });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 17)   }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 18) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 19)   async prompt(messages: string[]): Promise<string> {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 20)     const normalized_messages = messages.map((msg) => ({ content: msg }));
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 21) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 22)     const result = await this.client.generateMessage({
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 23)       model: this.MODEL_NAME,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 24)       temperature: this.TEMPERATURE,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 25)       candidateCount: this.CANDIDATE_COUNT,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 26)       prompt: {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 27)         messages: normalized_messages,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 28)       },
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 29)     });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 30) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 31)     return result?.[0]?.candidates?.[0]?.content ?? 'Error generating message.';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 32)   }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 33) }
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 1) import { Firestore } from '@google-cloud/firestore';
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 2) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 3) const firestore = new Firestore({
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 4)   projectId: 'recurseai-b9e9c',
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 5)   keyFilename:
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 7) });
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 8) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 9) export default firestore;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  2) import { Timestamp } from '@google-cloud/firestore';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  3) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  4) interface VersionOfMessage {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  5)   sentTime: Timestamp;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  6)   content: string;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  7) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  8) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  9) interface Message {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 10)   author: 'User' | 'AI';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 11)   versionsOfMessages: VersionOfMessage[];
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 12) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 13) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 14) interface ChatData {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 15)   dateCreated: Timestamp;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 16)   lastUsedDate: Timestamp;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 17)   messages: Message[];
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 18) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 19) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 20) async function createNewChat(): Promise<string> {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 21)   const chatData: ChatData = {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 22)     dateCreated: Timestamp.now(),
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 23)     lastUsedDate: Timestamp.now(),
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 24)     messages: [],
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 25)   };
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 26) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 27)   const chatRef = await firestore.collection('chats').add(chatData);
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 28)   return chatRef.id; // Returns the ID of the newly created chat.
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 29) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 30) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 31) export { createNewChat };
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  1) import { NextApiRequest, NextApiResponse } from 'next';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  3) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  4) export default async function handler(
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  5)   req: NextApiRequest,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  6)   res: NextApiResponse,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  7) ): Promise<void> {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  8)   try {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  9)     if (req.method === 'POST') {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 10)       const chatId = await createNewChat();
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 11)       res.status(200).json({ chatId });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 12)     } else if (req.method === 'GET') {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 13)       res.status(200).json({ message: 'Chat API Endpoint' });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 14)     } else {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 15)       res.status(405).end(); // Method Not Allowed
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 16)     }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 17)   } catch (error: unknown) {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 18)     console.error(error);
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 19)     res.status(500).json({ error: 'Internal Server Error' });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 20)   }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 21) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  1) import type { NextApiRequest, NextApiResponse } from 'next';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  3) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  4) // Define the expected request body type
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  5) interface MessageBody {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  6)   author: 'User' | 'AI';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  7) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  8) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  9) export default async function handler(
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 10)   req: NextApiRequest,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 11)   res: NextApiResponse,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 12) ) {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 13)   try {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 14)     if (req.method === 'POST') {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 15)       const { author } = req.body as MessageBody;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 16)       const chatId = req.query.chatId as string;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 17) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 18)       // Validate chatId and author
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 19)       if (
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 20)         typeof chatId !== 'string' ||
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 21)         !(author === 'User' || author === 'AI')
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 22)       ) {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 23)         return res.status(400).json({ error: 'Invalid input' });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 24)       }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 25) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 26)       const messageId = await addMessageToChat(chatId, author);
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 27)       return res.status(200).json({ messageId });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 28)     }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 29) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 30)     return res.status(405).end(); // Method Not Allowed
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 31)   } catch (error) {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 32)     console.error(error);
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 33)     return res.status(500).json({ error: 'Internal Server Error' });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 34)   }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 35) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  1) // Import Next.js types
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  2) import type { NextApiRequest, NextApiResponse } from 'next';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  4) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  5) // Define the expected request body type
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  6) interface VersionBody {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  7)   messageId: string;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  8)   content: string;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  9) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 10) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 11) export default async function handler(
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 12)   req: NextApiRequest,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 13)   res: NextApiResponse,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 14) ) {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 15)   try {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 16)     if (req.method === 'POST') {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 17)       // Validate and cast the request body
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 18)       const { messageId, content } = req.body as VersionBody;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 19) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 20)       // Basic input validation
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 21)       if (typeof messageId !== 'string' || typeof content !== 'string') {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 22)         return res.status(400).json({ error: 'Invalid input' });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 23)       }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 24) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 25)       const versionId = await addVersionToMessage(messageId, content);
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 26)       return res.status(200).json({ versionId });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 27)     }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 28) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 29)     return res.status(405).end(); // Method Not Allowed
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 30)   } catch (error) {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 31)     console.error(error);
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 32)     return res.status(500).json({ error: 'Internal Server Error' });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 33)   }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 34) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  2) import { Timestamp, FieldValue } from '@google-cloud/firestore';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  3) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  4) interface MessageData {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  5)   author: 'User' | 'AI';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  6)   versionsOfMessages: VersionOfMessage[];
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  7) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  8) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  9) interface VersionOfMessage {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 10)   sentTime: Timestamp;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 11)   content: string;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 12) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 13) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 14) async function addMessageToChat(
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 15)   chatId: string,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 16)   author: 'User' | 'AI',
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 17) ): Promise<string> {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 18)   const messageData: MessageData = {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 19)     author: author,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 20)     versionsOfMessages: [],
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 21)   };
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 22) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 23)   const messageRef = await firestore.collection('messages').add(messageData);
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 24) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 25)   await firestore
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 26)     .collection('chats')
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 27)     .doc(chatId)
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 28)     .update({
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 29)       messages: FieldValue.arrayUnion(messageRef.id),
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 30)       lastUsedDate: Timestamp.now(),
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 31)     });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 32) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 33)   return messageRef.id;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 34) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 35) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 36) export { addMessageToChat };
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  2) import { Timestamp, FieldValue } from '@google-cloud/firestore';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  3) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  4) async function addVersionToMessage(
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  5)   messageId: string,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  6)   content: string,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  7) ): Promise<string> {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  8)   const versionData = {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  9)     sentTime: Timestamp.now(),
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 10)     content: content,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 11)   };
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 12) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 13)   const versionRef = await firestore
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 14)     .collection('versionsOfMessages')
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 15)     .add(versionData);
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 16) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 17)   await firestore
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 18)     .collection('messages')
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 19)     .doc(messageId)
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 20)     .update({
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 21)       versionsOfMessages: FieldValue.arrayUnion(versionRef.id),
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 22)     });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 23) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 24)   return versionRef.id; // Returns the ID of the newly added version.
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 25) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 26) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 27) export { addVersionToMessage };
^2fa9c6c components/fetch-data.ts (Austin Gilbert  2023-10-16 13:47:06 -0400  1) 'use server';
^2fa9c6c components/fetch-data.ts (Austin Gilbert  2023-10-16 13:47:06 -0400  2) import { PalmAiApiWrapper } from 'app/api/aiApiWrapper/PalmAiApiWrapper';
^2fa9c6c components/fetch-data.ts (Austin Gilbert  2023-10-16 13:47:06 -0400  3) 
^2fa9c6c components/fetch-data.ts (Austin Gilbert  2023-10-16 13:47:06 -0400  8)   console.log('INPUT DATA: ', inputData);
^2fa9c6c components/fetch-data.ts (Austin Gilbert  2023-10-16 13:47:06 -0400  9)   const x = new PalmAiApiWrapper();
^2fa9c6c components/fetch-data.ts (Austin Gilbert  2023-10-16 13:47:06 -0400 12)   return res;
^2fa9c6c components/fetch-data.ts (Austin Gilbert  2023-10-16 13:47:06 -0400 13)   // add data to database for regeneration and selecting point of entry for prompts
^2fa9c6c components/fetch-data.ts (Austin Gilbert  2023-10-16 13:47:06 -0400 14) }
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  1) // Import the functions you need from the SDKs you need
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  2) import { initializeApp } from 'firebase/app';
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  3) import { getAuth, GoogleAuthProvider } from 'firebase/auth';
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  4) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  5) // https://firebase.google.com/docs/web/setup#available-libraries
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  6) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  7) // For Firebase JS SDK v7.20.0 and later, measurementId is optional
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 17) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 18) // Initialize Firebase
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 19) const app = initializeApp(firebaseConfig);
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 20) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 21) // Get Auth instance
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 22) const auth = getAuth(app);
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 23) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 24) // Initialize GoogleAuthProvider
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 25) const googleProvider = new GoogleAuthProvider();
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 26) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 27) export { auth, googleProvider };
^2fa9c6c app/chat_page/page.module.css (Austin Gilbert  2023-10-16 13:47:06 -0400  1) .responseText {
^2fa9c6c app/chat_page/page.module.css (Austin Gilbert  2023-10-16 13:47:06 -0400 15) }
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 37)   height: 95vh;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 38)   justify-content: center;
17512d9f app/chat/page.module.css      (Austin Gilbert  2023-10-30 18:57:07 -0400 49) 
17512d9f app/chat/page.module.css      (Austin Gilbert  2023-10-30 18:57:07 -0400 50) .textBox{
17512d9f app/chat/page.module.css      (Austin Gilbert  2023-10-30 18:57:07 -0400 51)   border-radius: 10px;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 52)   width: 82vh;
17512d9f app/chat/page.module.css      (Austin Gilbert  2023-10-30 18:57:07 -0400 53)   padding: .5rem;
17512d9f app/chat/page.module.css      (Austin Gilbert  2023-10-30 18:57:07 -0400 54)   height: 25px;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 55) }
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 56) 
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 57) 
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 58) .button{
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 59)   display: inline-flex;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 60)   height: 45px;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 61)   padding: 0;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 62)   background: #009578;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 63)   border-radius: 7px;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 64)   border: none;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 65)   outline: none;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 66)   overflow: hidden;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 67)   font-size: 14px;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 68)   font-weight: 500;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 69)   cursor: pointer;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 70)   margin-left: 78%;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 71)   margin-bottom: 16px;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 72) } 
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 73) .button:hover{
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 74)   background: #008168;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 75) }
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 76) 
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 77) .button:active {
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 78)   background: #006e58
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 79) }
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 80) 
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 81) .button__text,
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 82) .button__icon{
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 83)   display: inline-flex;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 84)   align-items: center;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 85)   padding: 0 12px;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 86)   color: #fff;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 87)   height: 100%;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 88) }
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 89) 
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 90) .button__icon{
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 91)   font-size: 1.3em;
ab31506a app/chat/page.module.css      (Austin Gilbert  2023-10-31 13:19:11 -0400 92)   background: rgba(0, 0, 0, 0.08);
^2fa9c6c app/chat_page/page.tsx (Austin Gilbert   2023-10-16 13:47:06 -0400  1) 'use client';
^2fa9c6c app/chat_page/page.tsx (Austin Gilbert   2023-10-16 13:47:06 -0400  5) 
^2fa9c6c app/chat_page/page.tsx (Austin Gilbert   2023-10-16 13:47:06 -0400  7)   return (
^2fa9c6c app/chat_page/page.tsx (Austin Gilbert   2023-10-16 13:47:06 -0400 13)   );
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  6) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  8)   return (
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 18)   );
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 19) }
Binary file (standard input) matches
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  1) :root {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  3)   --border-radius: 12px;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  1) import './globals.css';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  2) import type { Metadata } from 'next';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  3) import { Inter } from 'next/font/google';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  5) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  6) const inter = Inter({ subsets: ['latin'] });
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  7) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  8) export const metadata: Metadata = {
26e62385 (Austin Gilbert   2023-10-31 15:46:22 -0400  9)   title: 'RecursiveAI',
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 10)   description: 'Generated by create next app',
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 11) };
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 12) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 13) export default function RootLayout({
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 14)   children,
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 15) }: {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 16)   children: React.ReactNode;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 17) }) {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 18)   return (
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 19)     <html lang="en">
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 23)     </html>
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 24)   );
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 25) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 1) export default function NotFound() {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 2)   return (
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 3)     <main>
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 5)     </main>
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 6)   );
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 7) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400   1) .border {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400   5) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400   6) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400   7) .navbar {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400   8)   background-color: #191825;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400   9)   color: #fff;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  10)   padding: 1rem;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  11) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  12) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  13) .container {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  15)   margin: 0 auto;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  16)   display: flex;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  17)   justify-content: space-between;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  18)   align-items: center;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  19) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  20) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  21) .left {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  22)   display: flex;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  23)   align-items: center;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  24) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  25) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  26) .brand a {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  28)   text-decoration: none;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  29)   font-weight: bold;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  31) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  32) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  33) .right {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  34)   display: flex;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  35)   gap: 40px;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  36)   align-items: center;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  37) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  38) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  39) .action {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  40)   display: flex;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  42) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  43) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  44) .action a {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  46)   text-decoration: none;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  47)   font-weight: bold;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  49) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  50) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  51) .action a:hover {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  52)   text-decoration: underline;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  53) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  54) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  55) .documentation {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  57) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  58) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  59) .account {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  61) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  62) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  63) .button {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  64)   border-radius: 12px;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  65)   color: #fff;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  66)   border: none;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  67)   padding: 0.5rem 1rem;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  68)   font-weight: bold;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  69)   font-size: 1rem;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  70)   cursor: pointer;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  71) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  72) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  73) .button:hover {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  74)   text-decoration: none;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  75) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  76) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  77) .iconTextContainer {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  78)   display: flex;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  79)   align-items: center;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  81) }
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  82) 
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  83) .icon {
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  84)   margin-left: 10px;
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  2) import styles from 'app/page.module.css';
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400  6)   return (
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 18)       <div>
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 19)         <Navbar />
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 20)         <div className={styles.border} />
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 21)       </div>
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 74)     </body>
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 75)   );
^2fa9c6c (Austin Gilbert   2023-10-16 13:47:06 -0400 76) }
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  1) 'use client';
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  2) import { useEffect } from 'react';
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  3) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  4) const TestPage = () => {
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  5)   console.log('first');
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  6)   useEffect(() => {
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  7)     console.log('second');
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  8)     const testFunctions = async () => {
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400  9)       try {
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 10)         const res = await fetch('/api/createChat');
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 11)         const { chatId } = await res.json();
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 12)         console.log('Chat ID:', chatId);
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 13)       } catch (error) {
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 14)         console.error('Error during testing:', error);
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 15)       }
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 16)     };
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 17) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 18)     void testFunctions();
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 19)   }, []);
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 20) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 21)   return null;
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 22) };
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 23) 
^2fa9c6c (Austin Gilbert 2023-10-16 13:47:06 -0400 24) export default TestPage;
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400   2) import { useState, useEffect } from 'react';
ab31506a components/ChatBox/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400  10) import {IonIcon} from '@ionic/react';
ab31506a components/ChatBox/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400  11) import {refresh} from 'ionicons/icons';
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  12) 
ab31506a components/ChatBox/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400  16) 
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  29) 
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  94)   function handleKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  95)     if (event.key === 'Enter') {
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 112)     }
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 113)   }
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 114) 
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 115)   return (
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 116)     <div>
ab31506a components/ChatBox/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400 158)      
ab31506a components/ChatBox/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400 162)         className={styles.button}
ab31506a components/ChatBox/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400 165)         <span className={styles.button__text}>Regenerate</span>
ab31506a components/ChatBox/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400 166)         <span className={styles.button__icon}>
ab31506a components/ChatBox/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400 167)           <IonIcon icon = {refresh} />
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 180)     </div>
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 181)   );
^2fa9c6c components/chat-box.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 182) }
^2fa9c6c components/chat-input.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  1) // Component for received input that renders to the screen as text with the edit button
^2fa9c6c components/chat-input.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  4) 
^2fa9c6c components/chat-input.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 58)   return (
^2fa9c6c components/chat-input.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 59)     <div>
^2fa9c6c components/chat-input.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 81)     </div>
^2fa9c6c components/chat-input.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 82)   );
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  89)   }
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  90) 
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  91) /* Styles for newChat Button */
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  92) .newChat{
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  93)   display: inline-flex;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  94)   height: 45px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  95)   padding: 0;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  96)   background: #009578;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  97)   border-radius: 7px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  98)   border: none;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400  99)   outline: none;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 100)   overflow: hidden;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 101)   font-size: 14px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 102)   font-weight: 500;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 103)   width:80%;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 104)   cursor: pointer;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 105)   margin: 8px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 106) } 
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 107) 
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 108) .newChat:hover{
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 109)   background: #008168;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 110) }
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 111) 
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 112) .newChat:active {
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 113)   background: #006e58
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 114) }
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 115) 
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 116) .button__text,
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 117) .button__icon{
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 118)   display: inline-flex;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 119)   align-items: center;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 120)   padding: 0 12px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 121)   color: #fff;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 122)   height: 100%;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 123) }
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 124) 
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 125) .button__icon{
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 126)   font-size: 1.3em;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 127)   background: rgba(0, 0, 0, 0.08);
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 128) }
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 129) 
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 130) /* Chat history buttons */
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 131) 
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 132) .history{
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 133)   display: inline-flex;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 134)   height: 35px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 135)   width: 95%;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 136)   padding: 0;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 137)   background: #191825;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 138)   border-radius: 8px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 139)   border: none;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 140)   outline: none;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 141)   overflow: hidden;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 142)   font-family: 'Quicksand', sans-serif;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 143)   font-size: 12px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 144)   font-weight: 250;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 145)   cursor: pointer;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 146)   margin-top: 4px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 147)   margin-left: 8px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 148) }
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 149) .history:hover{
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 150)   background: #43434F;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 151) }
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 152) .history:active{
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 153)   background: #5b5b5d ;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 154) }
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 155) .history_text,
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 156) .history_icon{
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 157)   display: inline-flex;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 158)   margin-left: 3px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 159)   align-items: center;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 160)   padding: 0 7px;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 161)   color: #fff;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 162)   height: 100%;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 163) }
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 164) .history_icon{
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 165)   font-size: 1.5em;
ab31506a components/ChatPageNavbar/index.module.css (Austin Gilbert 2023-10-31 13:19:11 -0400 166) }
ab31506a components/ChatPageNavbar/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400 170)         </span>
ab31506a components/ChatPageNavbar/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400 179)         >
ab31506a components/ChatPageNavbar/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400 182)           </span>
ab31506a components/ChatPageNavbar/index.tsx (Austin Gilbert   2023-10-31 13:19:11 -0400 183) 
^2fa9c6c components/chat-response.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  4) // Component for the LLM response to the user's input
^2fa9c6c components/chat-response.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  5) // Needs to have a regenerate response function which calls the API
^2fa9c6c components/chat-response.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  6) // Also needs the ability to swap back and forth between previous responses
^2fa9c6c components/chat-response.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  7) 
^2fa9c6c components/chat-response.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400  9) 
^2fa9c6c components/chat-response.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 39)   return (
^2fa9c6c components/chat-response.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 71)     </div>
^2fa9c6c components/chat-response.tsx      (Austin Gilbert   2023-10-16 13:47:06 -0400 72)   );
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400  2) import Link from 'next/link';
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400  8) 
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400  9)   return (
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 10)     <nav className={styles.navbar}>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 11)       <div className={styles.container}>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 12)         <div className={styles.left}>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 13)           <div className={styles.brand}>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 14)             <Link href="/">RecurseAI</Link>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 15)           </div>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 16)         </div>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 17)         <div className={styles.right}>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 18)           <div className={styles.action}>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 19)             <div className={`${styles.button} ${styles.documentation}`}>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 20)               <Link href="/documentation">Documentation</Link>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 21)             </div>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 22)           </div>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 23)           <div className={styles.action}>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 24)             <div className={`${styles.button} ${styles.account}`}>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 26)             </div>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 27)           </div>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 28)         </div>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 29)       </div>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 30)     </nav>
^2fa9c6c components/landing-page-navbar.tsx     (Austin Gilbert   2023-10-16 13:47:06 -0400 31)   );

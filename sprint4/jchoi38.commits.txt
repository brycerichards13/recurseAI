^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   1) /* eslint-disable @typescript-eslint/no-unsafe-assignment */
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   2) /* eslint-disable react/no-children-prop */
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   3) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   4) // Component for the LLM response to the user's input
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   5) // Needs to have a regenerate response function which calls the API
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   6) // Also needs the ability to swap back and forth between previous responses
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   7) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   8) import { Tree } from 'lib/tree-datastructure';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   9) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  10) // Markdown and Plugins
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  11) import Markdown from 'react-markdown';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  12) import remarkGfm from 'remark-gfm';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  13) import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  14) import { materialOceanic } from 'react-syntax-highlighter/dist/esm/styles/prism';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  15) import styles from '../ChatResponse/chatresponse.module.css';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  16) import { recursePromptText } from 'lib/recurse-prompt';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  18) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  19) interface ChatResponseProps {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  20)   data: string;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  21)   index: number;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  22)   chatTree: Tree;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  23)   onChangePriorityChild: (direction: number) => void;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  24)   onUpdateInputArray: (chatTree: Tree) => void;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  26) }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  27) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  28) export default function ChatResponse({
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  29)   data,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  30)   index,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  31)   chatTree,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  32)   onChangePriorityChild,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  33)   onUpdateInputArray,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  35) }: ChatResponseProps) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  36)   const chatTreeVar: Tree = chatTree;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  37) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  38)   function changeChildAndRefreshArray(direction: number) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  39)     onChangePriorityChild(direction);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  40)     onUpdateInputArray(chatTreeVar);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  41)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  42) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  44) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  45)   const sendReponseToAPI = () => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  46)     if (isInputValid) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  47)       console.log('Sending response to server:', data);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  48)     } else {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  49)       console.log('Invalid response data. Cannot send to API.');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  50)     }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  51)   };
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  52) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  53)   const recurseResponse = () => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  67)   };
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  68) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  69)   return (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  70)     <div className={styles.responseText}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  71)       <p>RESPONSE:</p>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  72)       <Markdown
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  73)         remarkPlugins={[remarkGfm]}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  74)         components={{
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  75)           code(props) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  76)             const { children, className, node, ...rest } = props;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  77)             const match = /language-(\w+)/.exec(className || '');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  78)             return match ? (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  79)               <SyntaxHighlighter
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  81)                 {...rest}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  82)                 children={String(children).replace(/\n$/, '')}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  84)                 language={match[1]}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  85)                 PreTag="div"
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  86)               />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  87)             ) : (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  88)               <code {...rest} className={className}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  89)                 {children}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  90)               </code>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  91)             );
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  92)           },
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  93)         }}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  94)       >
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  95)         {data}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  96)       </Markdown>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  97)       <div className={styles.responseFooter}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  98)         {/* Looks at priorityChild's (current input selected)
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  99)         children's (all AI responses for the selected input) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 100)         length to determine if arrows should show. */}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 101)         {chatTree.children[chatTree.priorityChild].children.length > 1 ? (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 102)           <>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 103)             <button onClick={() => changeChildAndRefreshArray(-1)}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 104)               <img src="/back.svg" alt="GO BACK" />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 105)             </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 106)             <button onClick={() => changeChildAndRefreshArray(1)}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 107)               <img src="/forward.svg" alt="GO FORWARD" />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 108)             </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 109)           </>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 110)         ) : (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 111)           <></>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 112)         )}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 114)       </div>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 115)     </div>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 116)   );
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 117) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) .responseText {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2)     color: white;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600  3)     width: 100%;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4)     border-radius: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)     padding: 10px 20px 0 20px;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600  6)     background-color: #B1B1A5;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)     align-self: flex-start;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600  8)     margin-right: auto;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600  9)     word-break: break-word;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 10) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) .responseFooter {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)     display: flex;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 14)     justify-content: left;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 15)     padding: 10px;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 16)     border-top: 1px solid #ccc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18) .responseFooter button {
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 19)     margin: 0 5px;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 20)     cursor: pointer;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)     border: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)     background-color: inherit;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24) .code {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)     border-radius: 15px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import React from 'react';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import ReactMarkdown from 'react-markdown';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) import { okaidia } from 'react-syntax-highlighter/dist/esm/styles/prism';
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500  5) import { vs } from 'react-syntax-highlighter/dist/esm/styles/prism';
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500  6) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) import styles from 'components/Markdown/index.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) import remarkGfm from 'remark-gfm';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10) interface MarkdownContentProps {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   children: string;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) const MarkdownContent: React.FC<MarkdownContentProps> = ({ children }) => {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)   const components = {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)     code({ node, inline, className, children, ...props }) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)       const match = /language-(\w+)/.exec(className || '');
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 18)       const language = match ? match[1] : "plaintext"; // Default to plaintext if no language is specified
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 19) 
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 20)       return !inline ? (
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 21)         <SyntaxHighlighter style={okaidia} language={language} PreTag="div" {...props}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)           {String(children).replace(/\n$/, '')}
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)         </SyntaxHighlighter>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)       ) : (
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 25)         <code className={styles.regularCode} {...props}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)           {children}
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)         </code>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)       );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29)     },
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)   };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32)   return (
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33)     <div className={styles.markdown}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34)       <ReactMarkdown components={components} remarkPlugins={[remarkGfm]}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35)         {children}
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 36)       </ReactMarkdown>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 37)     </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 38)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 39) };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 40) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 41) export default MarkdownContent;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) .markdown :global(h1) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2)     font-size: 2rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3)     margin-top: 1rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)   
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)   .markdown :global(h2) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)     font-size: 1.75rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)     margin-top: 1rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   .markdown :global(p) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)     margin: 1rem 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)   
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)   .markdown :global(a) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)     color: #a6b1e1;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)     text-decoration: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)   
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)   .markdown :global(a:hover) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)     text-decoration: underline;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)   
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)   .markdown :global(ul),
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)   .markdown :global(ol) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)     padding-left: 1.5rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)   
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29)   .markdown :global(code) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)     background-color: #424874;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)     padding: 0.2rem 0.5rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32)     border-radius: 3px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33)     font-family: 'Courier New', Courier, monospace;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35)   .markdown table {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 36)     width: 100%;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 37)     border-collapse: collapse;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 38)     margin-top: 20px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 39)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 40)   
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 41)   .markdown th, .markdown td {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 42)     border: 1px solid ;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 43)     padding: 8px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 44)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 45)   
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 46)   .markdown th {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 47)     background-color: #25252b;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 48)     text-align: left;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 49)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 50) 
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 51)   .regularCode {
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 52)     background-color: #f5f5f5;
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 53)     border: 1px solid #ddd;
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 54)     border-radius: 4px;
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 55)     padding: 10px;
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 56)     font-family: 'Courier New', Courier, monospace;
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 57)     font-size: 0.9em;
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 58)     overflow-x: auto;
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 59) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  1) import { useState } from 'react';
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  2) import Link from 'next/link';
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  3) import styles from './cards.module.css';
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  4) import Image from 'next/image';
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  5) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  6) function Modal({ show, onClose, title, children }) {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  7)   if (!show) {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  8)     return null;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  9)   }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 10) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 11)   return (
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 12)     <div className={styles.modalBackdrop}>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 13)       <div className={styles.modal}>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 14)         <h2>{title}</h2>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 15)         {children}
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 16)         <button onClick={onClose}>Close</button>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 17)       </div>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 18)     </div>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 19)   );
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 20) }
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 21) interface CardsProps {
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 22)   title: string;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 23)   body: string;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 24) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 25) 
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 26) export default function Cards({ title, body }: CardsProps) {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 27)   'use client';
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 28) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 29)   const [showBody, setShowBody] = useState(false);
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 30)   const [showModal, setShowModal] = useState(false);
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 31) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 32)   const handlePreviewClick = () => {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 33)     setShowModal(true);
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 34)   };
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 35) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 36)   return (
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 37)     <div className={styles.cards}>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 38)       <div className={styles.card}>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 39)         <div className={styles.cardContent}>
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600 40)           <div className={styles.title}>{title}</div>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 41)           <p>{body}</p>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 42)           {showBody && <p>{body}</p>}
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 43)           <div className={styles.foot}>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 44)             <button onClick={handlePreviewClick}>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 45)               <span>Preview</span>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 46)             </button>
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 47)             <Link href="/chat">
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 48)               <Image src="/forward.svg" alt="forward" width={24} height={24} />
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 49)             </Link>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 50)           </div>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 51)         </div>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 52)       </div>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 53)       <Modal show={showModal} onClose={() => setShowModal(false)} title={title}>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 54)         <p>{body}</p>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 55)       </Modal>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 56)     </div>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 57)   );
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 58) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600   1) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600   2) #cards {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600   3)   width: 90%;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600   4)   padding-inline: 20px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600   5)   display: flex;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600   6)   flex-wrap: wrap;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600   7)   gap: 30px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600   8)   
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600   9) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  10) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  11) .card {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  12)   min-width: 200px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  13)   height: 350px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  14)   flex: 1 1 250px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  15)   background-color: rgba(255, 255, 255, 0.12);
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  16) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  17)   border-radius: 12px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  18)   position: relative;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  19)   box-shadow: 0px 10px 30px -5px rgba(0, 0, 0, 0.3);
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  20) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  21) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  22) .cardContent {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  23)   position: absolute;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  24)   inset: 1px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  25)   background-color: #d9d9d9;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  26)   border-radius: inherit;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  27) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  28) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  29) .cardContent {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  30)   display: flex;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  31)   justify-content: center;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  32)   align-items: center;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  33)   flex-direction: column;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  34)   gap: 10px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  35)   align-items: center;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  36)   min-height: 350px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  37) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  38) 
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  39) .title {
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  40)   font-weight: 1000;
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  41)   font-size: large;
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  42)   height: 10%;
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  43)   color: #191825;
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  44)   white-space: nowrap;
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  45)   overflow: hidden;
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  46)   text-overflow: ellipsis;
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  47)   max-width: 90%;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  48) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  49) 
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  50) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  51) .cardContent > p {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  52)     position: relative;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  53)     height: 50%;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  54)     width: 90%;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  55)     word-wrap: break-word;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  56)     overflow: hidden;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  57)     /* color: rgba(255, 255, 255, 0.5); */
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  58)     color: #191825;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  59) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  60) .cardContent > p::after {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  61)     content: "";
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  62)     position: absolute;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  63)     bottom: 0;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  64)     left: 0;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  65)     width: 100%;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  66)     height: 20%;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  67)     background: linear-gradient(to top, #d9d9d9, transparent);
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  68) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  69) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  70) .foot {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  71)     display: flex;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  72)     justify-content: space-between;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  73)     width: 90%;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  74)     gap: 10px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  75) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  76) .foot button, .foot a{
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  77)     all: unset;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  78)     cursor: pointer;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  79) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  80) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  81) .foot > button, .foot > a{
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  82)   height: inherit;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  83)   padding-block: 0.8rem;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  84)   background-color: rgba(255, 255, 255, 0.05);
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  85)   border: 1px solid rgba(255, 255, 255, 0.1);
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  86)   border-radius: 6px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  87)   display: flex;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  88)   justify-content: center;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  89)   align-items: center;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  90)   gap: 8px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  91)   z-index: 10;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  92) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  93) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  94) .foot > button {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  95)     width: 80%;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  96)   color: #191825;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  97) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  98) .foot > a {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  99)     width: 20%;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 100) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 101) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 102) .foot > button:hover {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 103)   background-color: rgba(255, 255, 255, 0.1);
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 104)   border: 1px solid rgba(255, 255, 255, 0.2);
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 105) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 106) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 107) .modalBackdrop {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 108)   position: fixed; /* Stay in place */
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 109)   z-index: 1000; /* Sit on top */
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 110)   left: 0;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 111)   top: 0;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 112)   width: 100%; /* Full width */
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 113)   height: 100%; /* Full height */
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 114)   overflow: auto; /* Enable scroll if needed */
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 115)   background-color: rgba(0, 0, 0, 0.5); /* Black w/ opacity */
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 116) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 117) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 118) .modal {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 119)   background-color: #fefefe;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 120)   margin: 15% auto; /* 15% from the top and centered */
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 121)   padding: 20px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 122)   border: 1px solid #888;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 123)   width: 80%; /* Could be more or less, depending on screen size */
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 124) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 125) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   1) // React components
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   2) import { useState, useEffect } from 'react';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   3) import { fetchData } from 'app/api/fetch-data';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   4) import { addMessage, addVersion } from 'app/api/ChatData/add-chatData';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   5) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   6) // Components
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   7) import ChatInput from 'components/ChatInput';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   8) import ChatResponse from 'components/ChatResponse';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   9) import { IonIcon } from '@ionic/react';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  10) import { refresh } from 'ionicons/icons';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  12) import ProjectPrompt from 'components/ProjectPrompt';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  13) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  14) // Data
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  15) import { projectPromptText } from 'lib/project-prompt';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  16) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  17) // CSS
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  18) import styles from '../ProjectPrompts/projectprompts.module.css';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  19) 
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  20) interface ResponseData {
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  21)   title: string;
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  22)   actions: Array<{
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  23)     action: string;
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  24)     details: string;
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  25)   }>;
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  26) }
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  27) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  28) export default function ChatBox() {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  29)   'use client';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  30) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  31)   const [inputValue, setInputValue] = useState<string>('');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  32)   const [inputArray, setInputArray] = useState<string[]>([]);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  33)   const [inputStringNoExtra, setInputStringNoExtra] = useState<string>('');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  34)   const [chainArray, setChainArray] = useState<string[]>([]);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  35)   const [titleValue, setTitle] = useState<string>('');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  36)   const [emptyProjectBool, setEmptyProjectBool] = useState<boolean>(true);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  37)   const [addGoalBool, setAddGoalBool] = useState<boolean>(false);
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  38)   const [detailArray, setDetailArray] = useState<string[]>([]);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  39) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  40)   function regenerateResponse() {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  41)     fetchData([inputArray[0]])
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  42)       .then((res) => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  43)         const result = interpretResponse(res);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  44)         setTitle(result.title);
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  45)         setChainArray(result.actions.map((action) => action.action));
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  46)         setDetailArray(result.actions.map((actionItem) => actionItem.details));
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  47)         setEmptyProjectBool(false);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  48)       })
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  49)       .catch((error) => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  50)         console.error('API Request Error: ', error);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  51)       });
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  52)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  53) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  54)   function addNewChain() {}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  55) 
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  56)   function extractJSON(input: string): string {
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  57)     const jsonRegex = /\{[\s\S]*\}/;
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  58)     const match = input.match(jsonRegex);
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  59)     if (match) {
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  60)       return match[0];
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  61)     } else {
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  62)       throw new Error("No JSON found in the input");
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  63)     }
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  64)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  65) 
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  66)   function interpretResponse(input: string): ResponseData {
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  67)     const JSONdata = extractJSON(input);
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  68)     try {
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  69)       const data: ResponseData = JSON.parse(JSONdata);
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  70)       if (!data.title || !Array.isArray(data.actions)) {
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  71)         throw new Error('JSON does not have the expected format.');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  72)       }
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  73)       return data;
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  74)     } catch (e) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  75)       throw new Error('Invalid JSON data.');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  76)     }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  77)   }
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  78)   
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  79)   function handleKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  80)     if (event.key === 'Enter') {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  81)       event.preventDefault();
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  82) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  83)       if (inputValue.trim() !== '') {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  85)         // This might not be secure \/ \/
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  86)         const inputPrompt: string = `${projectPromptText}"${inputValue}"`;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  87)         const updatedInputArray: string[] = [inputPrompt];
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  88) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  89)         fetchData(updatedInputArray)
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  90)           .then((res) => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  91)             const result = interpretResponse(res);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  92)             setTitle(result.title);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  93)             setInputArray(updatedInputArray);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  94)             setInputStringNoExtra(inputValue);
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  95)             setChainArray(result.actions.map((action) => action.action));
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600  96)             setDetailArray(result.actions.map((actionItem) => actionItem.details));
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  97)             setEmptyProjectBool(false);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  98)           })
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  99)           .catch((error) => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 100)             console.error('API Request Error: ', error);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 101)           });
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 102)         setInputValue('');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 103)       } else {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 104)       }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 105)     }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 106)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 107) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 109)   function handleChangeInputClick() {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 110)     setEmptyProjectBool(true);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 111)     setInputValue(inputStringNoExtra);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 112)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 113) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 114)   function handleAddGoalClick() {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 115)     setAddGoalBool(true);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 116)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 117) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 118)   return (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 119)     <div>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 120)       <header className={styles.header}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 121)         <h2 className={styles.title}>{titleValue}</h2>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 122)         <button style={{ marginLeft: 'auto', cursor: 'pointer' }}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 123)           <img src="/settings_icon.svg" alt="settings" />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 124)         </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 125)       </header>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 126) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 127)       <footer className={styles.footer}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 128)         <button
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 129)           type="button"
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 130)           className={styles.button}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 131)           onClick={() => regenerateResponse()}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 132)         >
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 133)           <span className={styles.button__text}>Regenerate</span>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 134)           <span className={styles.button__icon}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 135)             <IonIcon icon={refresh} />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 136)           </span>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 137)         </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 138) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 139)         {emptyProjectBool === true ? (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 140)           <form action={fetchData}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 141)             <input
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 142)               className={styles.textBox}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 143)               onKeyDown={handleKeyDown}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 144)               type={'data'}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 145)               value={inputValue}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 146)               onChange={(e) => setInputValue(e.target.value)}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 147)             />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 148)           </form>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 149)         ) : (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 150)           <button onClick={handleChangeInputClick}>Change Project Input</button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 151)         )}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 152)       </footer>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 153) 
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600 154)       <main className={styles.container}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 155)         {chainArray.map((message, index) => {
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600 156)           const detailString: string = detailArray.at(index) || '';
3961a4c4 (Jason Choi      2023-11-23 00:43:39 -0600 157)           return <ProjectPrompt key={index || 0} data={message || ''} detail={detailString} />;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 158)         })}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 159)       </main>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 160)       {emptyProjectBool === true ? null : addGoalBool === true ? ( // True
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 161)         <input></input>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 162)       ) : (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 163)         // True
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 164)         <button onClick={handleAddGoalClick}>Add</button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 165)       )}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 166)     </div>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 167)   );
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 168) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) .chatSection {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2)   flex-grow: 1;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3)   width: inherit;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) .chatScroll {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)   overflow-y: auto;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)   height: calc(100% - 150px);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9) .footer {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   justify-content: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   padding: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   background-color: #d9d9d9;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)   max-height: 100px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16) .textBox {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)   border-radius: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)   width: 82vh;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)   padding: 0.5rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)   height: 25px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23) .button {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)   display: inline-flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)   height: 45px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)   padding: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)   background: #009578;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)   border-radius: 7px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29)   border: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)   outline: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)   overflow: hidden;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32)   font-size: 14px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33)   font-weight: 500;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34)   cursor: pointer;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 36) .button:hover {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 37)   background: #008168;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 38) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 39) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 40) .button:active {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 41)   background: #006e58;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 42) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 43) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 44) .button__text,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 45) .button__icon {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 46)   display: inline-flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 47)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 48)   padding: 0 12px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 49)   color: #fff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 50)   height: 100%;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 51) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 52) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 53) .button__icon {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 54)   font-size: 1.3em;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 55)   background: rgba(0, 0, 0, 0.08);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 56) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 57) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 58) .header {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 59)   background-color: #d9d9d9;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 60)   padding: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 61)   max-height: 50px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 62)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 63) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 64) .flipHorizontal {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 65)   transform: scaleX(-1);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 66) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 67) .title {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 68)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 69)   padding: 0px 28px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 70)   justify-content: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 71)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 72)   flex: 1 0 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 73)   align-self: stretch;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 74) }
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 75) .container {
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 76)   min-height: 100vh;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 77)   background-color: inherit;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 78)   display: flex;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 79)   flex-wrap: wrap;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 80)   justify-content: center;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 81)   gap: 20px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 82) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import React from 'react';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) interface UserContextType {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4)   email: string | null;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)   setEmail: React.Dispatch<React.SetStateAction<string | null>>;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) const defaultValue: UserContextType = {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   email: null,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   setEmail: () => {},
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13) const UserContext = React.createContext<UserContextType>(defaultValue);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15) export default UserContext;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   1) /* Landing page Horizontal Navigation Bar */
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   2) .sidebar {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   3)   width: 260px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   4)   background-color: #191825;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   5)   height: 100vh;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   6)   left: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   7)   overflow: hidden;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   8)   transition: width 0.3s ease;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   9) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  10) .sidebarclosed {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  11)   width: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  12) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  13) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  14) .navbar {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  15)   background-color: #191825;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  16)   color: #fff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  17)   padding: 1rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  18) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  19) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  20) .container {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  21)   max-width: 90vw;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  22)   margin: 0 auto;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  23)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  24)   justify-content: space-between;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  25)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  26) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  27) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  28) .left {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  29)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  30)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  31) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  32) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  33) .brand a {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  34)   color: #e6fffc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  35)   text-decoration: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  36)   font-weight: bold;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  37)   font-size: 2.25rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  38) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  39) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  40) .right {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  41)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  42)   gap: 40px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  43)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  44) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  45) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  46) .action {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  47)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  48)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  49) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  50) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  51) .action a {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  52)   color: #e6fffc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  53)   text-decoration: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  54)   font-weight: bold;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  55)   font-size: 1.25rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  56) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  57) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  58) .action a:hover {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  59)   text-decoration: underline;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  60) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  61) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  62) .documentation {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  63)   background-color: #43434f;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  64) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  65) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  66) .account {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  67)   background-color: #865dff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  68) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  69) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  70) .button {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  71)   border-radius: 12px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  72)   color: #fff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  73)   border: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  74)   padding: 0.5rem 1rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  75)   font-weight: bold;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  76)   font-size: 1rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  77)   cursor: pointer;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  78) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  79) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  80) .button:hover {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  81)   text-decoration: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  82) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  83) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  84) .iconTextContainer {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  85)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  86)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  87) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  88) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  89) .icon {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  90)   margin-left: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  91) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  92) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  93) /* Chat page Vertical Navigation Bar */
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  94) .nav {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  95)   flex-shrink: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  96)   overflow-x: hidden;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  97)   width: inherit;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  98)   height: inherit;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  99)   background-color: #191825;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 100)   color: #e6fffc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 101) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 102) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 103) /* Styles for newChat Button */
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 104) .newChat {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 105)   display: inline-flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 106)   height: 45px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 107)   padding: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 108)   background: #009578;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 109)   border-radius: 7px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 110)   border: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 111)   outline: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 112)   overflow: hidden;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 113)   font-size: 14px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 114)   font-weight: 500;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 115)   width: 80%;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 116)   cursor: pointer;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 117)   margin: 8px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 118) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 119) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 120) .newChat:hover {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 121)   background: #008168;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 122) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 123) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 124) .newChat:active {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 125)   background: #006e58;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 126) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 127) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 128) .button__text,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 129) .button__icon {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 130)   display: inline-flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 131)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 132)   padding: 0 12px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 133)   color: #fff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 134)   height: 100%;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 135) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 136) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 137) .button__icon {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 138)   font-size: 1.3em;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 139)   background: rgba(0, 0, 0, 0.08);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 140) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 141) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 142) /* Chat history buttons */
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 143) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 144) .history {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 145)   display: inline-flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 146)   height: 35px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 147)   width: 95%;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 148)   padding: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 149)   background: #191825;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 150)   border-radius: 8px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 151)   border: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 152)   outline: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 153)   overflow: hidden;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 154)   font-family: 'Quicksand', sans-serif;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 155)   font-size: 12px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 156)   font-weight: 250;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 157)   cursor: pointer;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 158)   margin-top: 4px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 159)   margin-left: 8px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 160) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 161) .history:hover{
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 162)   background: #43434f;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 163) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 164) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 165) .history_text,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 166) .history_icon {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 167)   display: inline-flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 168)   margin-left: 3px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 169)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 170)   padding: 0 7px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 171)   color: #fff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 172)   height: 100%;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 173) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 174) .history_icon {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 175)   font-size: 1.5em;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 176) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 177) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 178) .active {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 179)   background: #43434f;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 180) }
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 1) .container {
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 2)     min-height: 100vh;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 3)     background-color: inherit;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 4)     display: flex;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 5)     flex-wrap: wrap;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 6)     justify-content: center;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 7)     gap: 20px;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 8) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) // import { Link } from 'react-router-dom';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import Link from 'next/link';
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600  3) import Card from '../Cards'
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600  4) import styles from './projectprompt.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) interface ProjectPromptProps {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)   key: number;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   data: string;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600  9)   detail: string;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) 
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 12) export default function ProjectPrompt({ key, data, detail }: ProjectPromptProps) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   return (
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 14)     <>
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 15)       <Card title={data} body={detail} />
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 16)     </>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18) }
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  1) import React, { useEffect, useState } from 'react';
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  2) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  3) interface FileParserProps {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  4)   file: File;
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  5)   onParsed: (content: string) => void;
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  6) }
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  7) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  8) const FileParser: React.FC<FileParserProps> = ({ file, onParsed }) => {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  9)   const [error, setError] = useState<string>('');
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 10) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 11)   const readFile = (file: File) => {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 12)     const reader = new FileReader();
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 13) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 14)     reader.onload = (e: ProgressEvent<FileReader>) => {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 15)       try {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 16)         const content = e.target?.result as string;
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 17)         // Add logic here to parse different file types
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 18)         switch (file.type) {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 19)           case 'application/json':
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 20)             onParsed(JSON.stringify(JSON.parse(content), null, 2));
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 21)             break;
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 22)           case 'text/plain':
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 23)             onParsed(content);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 24)             break;
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 25)           // Add cases for other file types here
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 26)           default:
002a0147 (Jason Choi 2023-11-29 16:46:33 -0500 27)             onParsed(content); // Treat all other file types as plain text
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 28)             break;
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 29)         }
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 30)       } catch (err) {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 31)         setError('Error parsing file');
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 32)       }
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 33)     };
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 34) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 35)     reader.onerror = () => {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 36)       setError('Error reading file');
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 37)     };
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 38) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 39)     reader.readAsText(file);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 40)   };
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 41) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 42)   useEffect(() => {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 43)     if (file) {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 44)       readFile(file);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 45)     }
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 46)   }, [file]);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 47) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 48)   return (
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 49)     <div>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 50)       {error && <p>Error: {error}</p>}
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 51)     </div>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 52)   );
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 53) };
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 54) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 55) export default FileParser;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) 'use client';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import { SessionProvider } from 'next-auth/react';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) export default function ClientSessionProvider({
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)   children,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) }: {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   children: React.ReactNode;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9) }) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   return <SessionProvider>{children}</SessionProvider>;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   1) // Component for received input that renders to the screen as text with the edit button
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600   2) import React, { useState, useRef, useEffect } from 'react';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   3) import styles from '../ChatInput/chatinput.module.css';
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600   4) import Markdown from 'react-markdown';
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600   5) import remarkGfm from 'remark-gfm';
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600   6) import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600   7) import { materialOceanic } from 'react-syntax-highlighter/dist/esm/styles/prism';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   8) import { Tree } from 'lib/tree-datastructure';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  11) interface ChatInputProps {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  12)   data: string;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  13)   index: number;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  14)   chatTree: Tree;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  15)   onChangePriorityChild: (direction: number) => void;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  16)   onChangePreviousInput: (data: string, index: number) => void;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  17)   onUpdateInputArray: (chatTree: Tree) => void;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  19) }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  20) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  21) export default function ChatInput({
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  22)   data,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  23)   index: indexValue,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  24)   chatTree,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  25)   // Prop function passed from the parent component to change the previous input
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  26)   onChangePriorityChild,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  27)   onUpdateInputArray,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  28)   onChangePreviousInput,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  30) }: ChatInputProps) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  31)   const [isEditing, setIsEditing] = useState(false);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  32)   const [inputValue, setInputValue] = useState(data);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  33)   const [validInput, setValidValue] = useState(true);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  34)   const indexVal: number = indexValue;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  35)   const chatTreeVar: Tree = chatTree;
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  36)   const textareaRef = useRef(null);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  37) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  38)   function changeChildAndRefreshArray(direction: number) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  39)     if (indexVal === 0) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  40)       if (chatTreeVar.priorityChild + direction < 0) return;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  41)       if (chatTreeVar.priorityChild + direction > chatTree.children.length - 1)
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  42)         return;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  43)       chatTreeVar.priorityChild = chatTreeVar.priorityChild + direction;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  44)       onUpdateInputArray(chatTreeVar);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  45)       setInputValue(chatTreeVar.returnStringArray()[chatTreeVar.priorityChild]);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  46)     } else {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  47)       onChangePriorityChild(direction);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  48)       onUpdateInputArray(chatTreeVar);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  49)       setInputValue(chatTreeVar.returnStringArray()[indexVal]);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  50)     }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  51)   }
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  52)   const updateValue = () => {
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  53)     setIsEditing(false); // Exit editing mode
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  54)     onChangePreviousInput(inputValue, indexVal); // Update the parent component
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  55)     // Additional logic if needed
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  56)   };
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  57)   const adjustTextareaHeight = () => {
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  58)     const textarea = textareaRef.current;
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  59)     if (textarea) {
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  60)       textarea.style.height = 'auto'; // Reset the height
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  61)       textarea.style.height = `${textarea.scrollHeight}px`; // Set to scroll height
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  62)     }
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  63)   };
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  64)   useEffect(() => {
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  65)     adjustTextareaHeight();
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  66)   }, [inputValue]);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  67) 
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  83)   const handleKeyDown = (event) => {
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  84)     if (event.key === 'Enter' && !event.shiftKey) {
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  85)       event.preventDefault();
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  86)       updateValue();
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  87)     } else if (event.key === 'Enter' && event.shiftKey) {
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  88)       setTimeout(adjustTextareaHeight, 0);
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  89)     }
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  90)   };
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  92)   const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  93)     const newValue = event.target.value;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  94) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  95)     if (newValue.trim() !== '') {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  96)       setInputValue(newValue);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  97)       setValidValue(true);
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600  98)       adjustTextareaHeight();
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  99)     } else {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 100)       setValidValue(false);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 101)     }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 102)   };
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 103) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 104)   const handleEditButtonClick = () => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 105)     setIsEditing(true);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 106)   };
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 107) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 108)   const handleInputBlur = () => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 109)     setIsEditing(false);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 110)     onChangePreviousInput(inputValue, indexVal);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 111)   };
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 112) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 113)   return (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 114)     <div className={styles.inputText}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 115)       {isEditing ? (
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 116)         <textarea
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 117)           className={styles.edit}
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 118)           ref={textareaRef}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 119)           type="data"
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 120)           value={inputValue}
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 121)           
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 122)           onChange={(e) => setInputValue(e.target.value)}
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 123)           onKeyDown={handleKeyDown}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 124)           onBlur={handleInputBlur}
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 125)           
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 126)         />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 127)       ) : (
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 128)         <div className={styles.text}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 129)           {validInput ? (
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 130)             <Markdown remarkPlugins={[remarkGfm]}>
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 131)               {inputValue}
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 132)             </Markdown>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 133)           ) : (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 134)             <p className={styles.errorText}>Input value cannot be empty.</p>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 135)           )}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 136)           <div className={styles.inputFooter}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 137)             <button onClick={handleEditButtonClick}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 138)               <img src="/edit.svg" alt="Change Input" />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 139)             </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 140)             {/* Disabled permanently until chat inputs are correctly stored. */}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 141)             {chatTree.children.length > 1 ? (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 142)               <>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 143)                 <button onClick={() => changeChildAndRefreshArray(-1)}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 144)                   <img src="/back.svg" alt="GO BACK" />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 145)                 </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 146)                 <button onClick={() => changeChildAndRefreshArray(1)}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 147)                   <img src="/forward.svg" alt="GO FORWARD" />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 148)                 </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 149)               </>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 150)             ) : (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 151)               <></>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 152)             )}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 154)           </div>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 155)         </div>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 156)       )}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 157)     </div>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 158)   );
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 159) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) .inputText {
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600  2)     display: flex;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600  3)     justify-content: flex-start;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600  4)     align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)     color: white;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600  6)     width: 100%;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)     border-radius: 10px;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600  8)     padding: 10px 20px 0px 20px;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600  9)     background-color: #7C8E8F;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 10)     margin-left: auto;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 11)     word-break: break-word;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) }
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 13) 
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 14) .text {
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 15)     text-align: left;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 16)     width: 100%;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 17)     color: inherit;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 18)     overflow-wrap: break-word;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 19) }
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 20) 
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 21) .edit {
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 22)     width: 100%;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 23)     background-color: inherit;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 24)     border: none;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 25)     resize: none;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 26)     color: white;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 27)     word-wrap: break-word;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 28) }
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 29) .edit:focus {
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 30)     outline: none;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 31)     border: none;
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 32) }
69889dc8 (Jason Choi 2023-11-20 00:52:24 -0600 33) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34) .inputFooter {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35)     display: flex;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 36)     justify-content: left;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 37)     padding: 10px;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 38)     border-top: 1px solid #ccc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 39) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 40) .inputFooter button {
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 41)     margin: 0 5px;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 42)     cursor: pointer;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 43)     border: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 44)     background-color: inherit;
34e2655e (Jason Choi 2023-11-20 14:06:51 -0600 45) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 46) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import styles from 'app/page.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import Link from 'next/link';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import { getServerSession } from 'next-auth/next';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) import { options } from 'app/api/auth/[...nextauth]/options';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) export default async function LandingPageNavbar() {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)   const session = await getServerSession(options);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   return (
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)     <nav className={styles.navbar}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)       <div className={styles.container}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)         <div className={styles.left}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)           <div className={styles.brand}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)             <Link href="/">RecurseAI</Link>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)           </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)         </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)         <div className={styles.right}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)           <div className={styles.action}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)             <div className={`${styles.button} ${styles.documentation}`}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)               <Link href="/docs/[slug]" as={'/docs/documentation'}>Documentation</Link>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)             </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)           </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)           <div className={styles.action}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)             <div className={`${styles.button} ${styles.account}`}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)               <Link href="/chat">{session?.user ? 'Chat' : 'Login'}</Link>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)             </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)           </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)         </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29)       </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)     </nav>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32) }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   3) // React components
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500   4) import { useState, useEffect, useRef, useCallback } from 'react';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   5) import { fetchData } from 'app/api/fetch-data';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   7) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   8) // Components
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500   9) import ChatInput from 'components/ChatInput';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  10) import ChatResponse from 'components/ChatResponse';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  11) import { Tree, TreeNode } from 'lib/tree-datastructure';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  12) import { IonIcon } from '@ionic/react';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  13) import { refresh } from 'ionicons/icons';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  30) import { cog } from 'ionicons/icons';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  31) import { menu } from 'ionicons/icons';
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500  32) import FileParser from '../../components/ParseFile'; // Adjust the import path as needed
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  33) // CSS
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  34) import { settings } from 'firebase/analytics';
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  35) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  36) // Init the chat tree and current node
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  37) // The current node is created to more easily add to the chain of nodes without having to iterate through the tree to find where to add the node
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  39) let currentNode: TreeNode;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  48) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  49) interface ChatAreaProps {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  50)   toggleSidebar: () => void;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  51)   isSidebarOpen: boolean; // Add this line to accept the new prop
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  52) }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  53) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  54) export default function ChatBox({
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  55)   children,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  56)   toggleSidebar,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  57)   isSidebarOpen,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  58) }: ChatAreaProps) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  59)   // Input value is equal to the current input in the input box
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  60)   // Input array is equal to the array of all inputs and outputs
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  61)   const [inputValue, setInputValue] = useState<string>('');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500  62)   const [inputArray, setInputArray] = useState<string[]>([]);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 262)   const textareaRef = useRef(null); // Create a ref for the textarea
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 264) 
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 265)   const [isDragOver, setIsDragOver] = useState(false);
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 266) 
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 267)   const [files, setFiles] = useState<File[]>([]);
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 268)   const [fileContents, setFileContents] = useState<string[]>([]);
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 269) 
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 270)   const handleDragOver = useCallback((event: React.DragEvent<HTMLTextAreaElement>) => {
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 271)     event.preventDefault();
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 272)   }, []);
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 273) 
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 274)   const handleDragEnter = useCallback((event: React.DragEvent<HTMLTextAreaElement>) => {
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 275)     setIsDragOver(true); // Set drag over state to true
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 276)   }, []);
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 277)   const handleDragLeave = useCallback((event: React.DragEvent<HTMLTextAreaElement>) => {
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 278)     setIsDragOver(false); // Set drag over state to false
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 279)   }, []);
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 280)   const handleDeleteFile = (index) => {
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 281)     setFiles(files.filter((_, fileIndex) => fileIndex !== index));
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 282)     setFileContents(fileContents.filter((_, contentIndex) => contentIndex !== index));
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 283)   };
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 284)   
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 285) 
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 286)   const handleDrop = useCallback((event: React.DragEvent<HTMLTextAreaElement>) => {
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 287)     event.preventDefault();
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 288)     const droppedFiles = event.dataTransfer.files;
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 289)     if (droppedFiles.length) {
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 290)       const validFiles = Array.from(droppedFiles).filter(file => {
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 291)         // List of file extensions considered as plain text
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 292)         const textFileExtensions = ['.c', '.cpp', '.py', '.js', '.html', '.css', '.java', '.xml', '.json', '.yaml', '.ini', '.toml', '.txt', '.md', '.sh', '.bat'];
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 293)         // Check if file extension is in the list
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 294)         const isTextFile = textFileExtensions.some(ext => file.name.endsWith(ext));
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 295)         return isTextFile;
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 296)       });
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 297)       setFiles(prevFiles => [...prevFiles, ...validFiles]);
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 298)       readFiles(validFiles);
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 299)     }
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 300)     setIsDragOver(false);
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 301)   }, []);
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 302) 
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 303)   const readFiles = (files: File[]) => {
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 304)     files.forEach(file => {
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 305)       const reader = new FileReader();
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 306)       reader.onload = (e) => {
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 307)         const text = e.target?.result;
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 308)         // Include the file name before the file content
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 309)         const fileContentWithFileName = `File: ${file.name}\n\n${text}`;
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 310)         setFileContents(prevContents => [...prevContents, fileContentWithFileName]);
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 311)       };
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 312)       reader.readAsText(file);
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 313)     });
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 314)   };
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 315) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 316)   // Function to resize the textarea
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 317)   const resizeTextarea = () => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 318)     const textarea = textareaRef.current;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 319)     if (textarea) {
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 320)       textarea.style.height = 'auto'; // Temporarily shrink to get the correct new scrollHeight
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 321)       textarea.style.height = `${textarea.scrollHeight}px`; // Set to the new height
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 322)     }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 323)   };
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 324) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 325)   function changePreviousInput(data: string, index: number) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 326)     // If the new input is different from the old input, then update the tree
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 327)     if (data != inputArray[index]) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 328)       let priorityNodeAtLevel: TreeNode;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 329)       // If the index is 0, then the priority node is the root node, and we need to add a new child directly to the tree ds
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 330)       // Otherwise we need to find the parent node of the node the user is changing, and add the new node as a child of that parent node
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 331)       // Once the new node (the new user input) is added, we change the priority child which basically switches the path of the tree to the new node
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 332)       if (index === 0) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 334)         chatTree.children.push(priorityNodeAtLevel);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 335)         chatTree.priorityChild = chatTree.priorityChild + 1;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 336)       } else {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 337)         priorityNodeAtLevel = chatTree.getChildAtLevel(index - 1, chatTree);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 339)         priorityNodeAtLevel.changePriorityChild(1);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 340)       }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 344) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 345)       updateInputArray(chatTree);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 346)       currentNode = priorityNodeAtLevel;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 347)       regenerateResponse(index + 1);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 348)     }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 349)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 350) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 351)   function regenerateResponse(indexToGoTill: number) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 352)     const priorityNodeAtLevel: TreeNode = chatTree.getChildAtLevel(
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 353)       indexToGoTill - 1,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 354)       chatTree,
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 355)     );
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 356) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 357)     const redoArray: string[] = chatTree
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 358)       .returnStringArray()
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 359)       .slice(0, indexToGoTill);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 360) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 361)     fetchData(redoArray)
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 362)       .then((response: string) => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 364)         priorityNodeAtLevel.changePriorityChild(1);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 368)         updateInputArray(chatTree);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 375)       })
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 376)       .catch((error) => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 377)         console.error('API Request Error: ', error);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 378)       });
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 380)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 381) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 390)   // Traverses through the tree to find the priority nodes and updates the input array
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 391)   // Also updates the current node to be the last priority node in the tree
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 392)   function updateInputArray(tree: Tree) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 393)     const newInputArray: string[] = tree.returnStringArray();
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 394)     setInputArray(newInputArray);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 396)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 397) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 399)     if (currentNode) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 404)       currentNode.addChild(childNode);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 405)       currentNode = childNode;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 406)     } else {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 408)       chatTree.children.push(currentNode);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 409)     }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 410)     updateInputArray(chatTree);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 411)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 412) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 417)   function handleKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 418)     if (event.key === 'Enter' && !event.shiftKey) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 419)       event.preventDefault();
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 420)       const userInput = inputValue.trim();
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 421)       const knowledge = fileContents.join('\n').trim();
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 422)       const instruction = 'Reply back to the userInput and reference the knowledge if applicable.';
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 423) 
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 424)       if (userInput.trim() !== '') {
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 425)         const dataToSend = JSON.stringify({
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 426)           task: instruction,
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 427)           userInput: userInput,
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 428)           knowledge: knowledge
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 429)         });
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 432)             addVersion(messageRes.messageId as string, dataToSend).catch(
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 445)         addNewNode(dataToSend, activeMessage);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 446) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 447)         const updatedInputArray: string[] = chatTree.returnStringArray();
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 448)         // Calls a server function from a separate file (because it's asynchronous and the component were currently in is a client component)
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 449)         // Awaits a response, then adds the new response to the tree
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 450)         fetchData(updatedInputArray)
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 451)           .then((res) => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 471)           })
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 472)           .catch((error) => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 473)             console.error('API Request Error: ', error);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 474)           });
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 475)         //Resets the input box to be empty
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 476)         setInputValue('');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 477)         resetTextareaSize();
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 478)         setIsDragOver(false);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 479)       } else {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 480)         //alert('Input cannot be empty.');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 481)         addNewNode('Error: Input cannot be empty');
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 482)       }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 483)     } else if (event.key === 'Enter' && event.shiftKey) {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 484)       // Allow the newline to be added by not calling event.preventDefault()
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 485)       // The browser will handle inserting the newline
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 486)     }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 487)   }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 488)   const resetTextareaSize = () => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 489)     const textarea = textareaRef.current;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 490)     if (textarea) {
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 491)       textarea.style.height = 'inherit'; // Set this to your desired minimum height
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 492)       // Reset the bottom of the chatBox if necessary
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 493)     }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 494)   };
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 495)   useEffect(() => {
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 496)     resizeTextarea();
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 497)   }, [inputValue]);
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 498)   return (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 499)     <div className={styles.chatSection}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 500)       <header className={styles.header}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 501)         <button className={styles.expand_icon} onClick={toggleSidebar}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 502)           <IonIcon icon={menu} />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 503)         </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 504)         <h2 className={styles.title}>Title</h2>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 505)         <button className={styles.option__icon}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 506)           <IonIcon icon={cog} />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 507)         </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 508)       </header>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 510)         {inputArray.map((message, index) => {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 511)           const hasPreviousPrompt = index > 0;
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 512)           const hasNextPrompt = index < inputArray.length - 1;
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 513)           let isJSON = true;
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 514)           try {
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 515)             JSON.parse(message);
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 516)           } catch (e) {
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 517)             isJSON = false;
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 518)           }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 519)           if (index % 2 === 0) {
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 520)             let userInput = message;
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 521)             if (isJSON) {
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 522)               // Parse the JSON string and extract userInput
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 523)               const messageObj = JSON.parse(message);
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 524)               userInput = messageObj.userInput;
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 525)             }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 526)             return (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 527)               <ChatInput
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 528)                 key={index}
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 529)                 data={userInput}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 530)                 indexValue={index}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 531)                 chatTree={chatTree}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 532)                 // Prop function to change the priority child of the parent node
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 533)                 // The .bind function is there because otherwise the node being passed in would not have the correct values
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 534)                 onChangePriorityChild={chatTree
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 535)                   .getChildAtLevel(index - 1, chatTree)
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 536)                   .changePriorityChild.bind(
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 537)                     chatTree.getChildAtLevel(index - 1, chatTree),
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 538)                   )}
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 539)                 // onUpdateInputArray={updateInputArray}
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 540)                 // onChangePreviousInput={changePreviousInput}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 542)               />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 543)             );
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 544)           } else {
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 545)             return (
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 546)               <ChatResponse
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 547)                 key={index}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 548)                 data={message}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 549)                 index={index}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 550)                 chatTree={chatTree}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 551)                 // Prop function to change the priority child of the parent node
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 552)                 // The .bind function is there because otherwise the node being passed in would not have the correct values
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 553)                 onChangePriorityChild={chatTree
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 554)                   .getChildAtLevel(index - 1, chatTree)
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 555)                   .changePriorityChild.bind(
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 556)                     chatTree.getChildAtLevel(index - 1, chatTree),
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 557)                   )}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 558)                 onUpdateInputArray={updateInputArray}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 560)               />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 561)             );
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 562)           }
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 563)         })}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 564)       </main>
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 565)       <div className={styles.files}>
c13db9a8 (Jason Choi      2023-11-29 17:56:07 -0500 566)         Knowledge Base: 
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 567)         {files.map((file, index) => (
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 568)           <button key={index} className={styles.fileButton} onClick={() => handleDeleteFile(index)}>
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 569)             <span className={styles.fileName}>{file.name}</span>
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 570)             <span className={styles.deleteText}>Delete</span>
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 571)           </button>
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 572)         ))}
002a0147 (Jason Choi      2023-11-29 16:46:33 -0500 573)       </div>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 574) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 575)       <footer className={styles.footer}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 576)         <button
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 577)           type="button"
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 578)           className={styles.button}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 579)           onClick={() => regenerateResponse(inputArray.length - 1)}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 580)         >
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 581)           <span className={styles.button__text}>Regenerate</span>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 582)           <span className={styles.button__icon}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 583)             <IonIcon icon={refresh} />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 584)           </span>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 585)         </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 586) 
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 587)         <form action={fetchData}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 588)           <div className={styles.chatBox}>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 589)             <textarea // Change this to textarea
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 590)               ref={textareaRef} // Attach the ref to the textarea
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 591)               onKeyDown={handleKeyDown}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 592)               onInput={resizeTextarea} // Add the onInput event handler
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 593)               value={inputValue}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 594)               onChange={(e) => setInputValue(e.target.value)}
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 595)               onDragOver={handleDragOver} // Attach the drag over event
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 596)               onDrop={handleDrop} // Attach the drop event
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 597)               onDragEnter={handleDragEnter} // Attach the drag enter event
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 598)               onDragLeave={handleDragLeave}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 599)               // style={{height: '0px'}}
3145c622 (Jason Choi      2023-11-27 13:20:03 -0500 600)               placeholder={isDragOver ? "Drag and drop file" : "Ask Away..."} // Conditional placeholder
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 601)               rows={1}
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 602)               cols={100}
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 603)             />
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 604)           </div>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 605)         </form>
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 606) 
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 607)         <button
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 608)           type="button"
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 609)           className={styles.button}
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 610)           onClick={scrollToBottom}
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 611)         >
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 612)           <span className={styles.button__text}>To Bottom</span>
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 613)           <span className={styles.button__icon}>
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 614)             <IonIcon icon={arrowDown} />
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 615)           </span>
69889dc8 (Jason Choi      2023-11-20 00:52:24 -0600 616)         </button>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 617)       </footer>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 618)     </div>
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 619)   );
^38079ad (Jason Choi      2023-11-15 07:55:37 -0500 620) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500   1) .chatSection {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500   2)   flex-grow: 1;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500   3)   width: calc(100% - 260px);
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500   4) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500   5) .chatScroll {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500   6)   overflow-y: auto;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500   7)   height: calc(100% - 170px);
69889dc8 (Jason Choi     2023-11-20 00:52:24 -0600   8)   padding-left: 10%;
69889dc8 (Jason Choi     2023-11-20 00:52:24 -0600   9)   padding-right: 10%;
69889dc8 (Jason Choi     2023-11-20 00:52:24 -0600  10)   border-left: #191825;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  11) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  12) .footer {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  14)   position: relative;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  15)   display: flex;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  16)   justify-content: center;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  18)   padding: 10px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  21) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  22) .chatBox {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  23)   width: 50vw;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  25)   max-height: none;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  26)   display: flex;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  27)   justify-content: center;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  28)   align-items: center;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  29) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  30) .footer textarea {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  31)   width: 48vw;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  32)   position: fixed;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  36)   border-radius: 20px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  37)   max-height: 100px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  38)   resize: none;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  39)   box-sizing: border-box;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  40)   transition: height 0.5s ease-out;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  41)   color: white;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  42)   background-color: #191825;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  45)   overflow-y: auto;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  46) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  47) .footer textarea:focus {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  50) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  51) .footer textarea::-webkit-scrollbar {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  53) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  54) 
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  57) .option__icon {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  58)   margin-top: 10px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  59)   margin-left: auto;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  60)   cursor: pointer;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  61)   border: none;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  62)   outline: none;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  63)   padding: 0;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  64)   font-size: 30px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  65)   background: transparent;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  66)   color: white;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  67)   height: fit-content;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  69)   position: relative;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  70) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  71) 
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  74) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  75) 
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  77)   margin-top: 10px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  78)   margin-right: auto;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  79) 
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  81)   height: fit-content;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  82)   border: none;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  83)   outline: none;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  84) 
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  85)   color: white;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  86)   cursor: pointer;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  87)   font-size: 30px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  88)   line-height: 1;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  89)   background: transparent;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  90)   align-items: center;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  91) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  93)   outline: auto;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  94) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  95) 
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  96) .button {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  97)   display: inline-flex;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  98)   height: 45px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500  99)   box-sizing: border-box;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 100)   padding: 0;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 101)   background: #009578;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 102)   border-radius: 7px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 103)   border: none;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 104)   outline: none;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 105)   overflow: hidden;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 106)   font-size: 14px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 107)   font-weight: 500;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 108)   cursor: pointer;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 109) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 110) .button:hover {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 111)   background: #008168;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 112) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 113) 
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 114) .button:active {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 115)   background: #006e58;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 116) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 117) 
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 118) .button__text,
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 119) .button__icon {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 120)   display: inline-flex;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 121)   align-items: center;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 122)   padding: 0 12px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 123)   color: #fff;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 124)   height: 100%;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 125) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 126) 
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 127) .button__icon {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 128)   font-size: 1.3em;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 129)   background: rgba(0, 0, 0, 0.08);
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 130) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 131) 
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 132) .header {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 133)   background-color: #191825;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 134)   padding: 10px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 135)   max-height: 50px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 136)   display: flex;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 137) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 138) .flipHorizontal {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 139)   transform: scaleX(-1);
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 140) }
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 141) .title {
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 142)   display: flex;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 143)   color: white;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 144)   padding: 0px 28px;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 145)   justify-content: center;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 146)   width: auto;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 147)   align-items: center;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 148)   flex: 1 0 0;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 149)   align-self: stretch;
^38079ad (Jason Choi     2023-11-15 07:55:37 -0500 150) }
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 151) 
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 152) .dropArea {
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 153)   border: 2px dashed #ccc;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 154)   padding: 20px;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 155)   text-align: center;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 156)   position: relative;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 157) }
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 158) 
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 159) .hoverMessage {
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 160)   display: none;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 161)   position: absolute;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 162)   top: 50%;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 163)   left: 50%;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 164)   transform: translate(-50%, -50%);
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 165)   font-size: 16px;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 166)   color: #666;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 167) }
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 168) 
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 169) .files {
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 170)   height: 20px;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 171)   overflow-y: hidden;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 172)   overflow-x: auto;
8df409dc (Jason Choi     2023-11-29 17:36:22 -0500 173)   width: 100%;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 174)   padding-left: 10px;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 175)   padding-right: 10px;
8df409dc (Jason Choi     2023-11-29 17:36:22 -0500 176)   white-space: nowrap;
c13db9a8 (Jason Choi     2023-11-29 17:56:07 -0500 177)   font-size: small;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 178) }
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 179) .fileButton {
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 180)   /* Styles for the button */
8df409dc (Jason Choi     2023-11-29 17:36:22 -0500 181)   display: inline-flex;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 182)   align-items: center;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 183)   justify-content: center;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 184)   background: transparent;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 185)   border: none;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 186)   cursor: pointer;
8df409dc (Jason Choi     2023-11-29 17:36:22 -0500 187)   min-width: 30px;
8df409dc (Jason Choi     2023-11-29 17:36:22 -0500 188)   max-width: 100px;
8df409dc (Jason Choi     2023-11-29 17:36:22 -0500 189)   text-overflow: ellipsis;
8df409dc (Jason Choi     2023-11-29 17:36:22 -0500 190) }
8df409dc (Jason Choi     2023-11-29 17:36:22 -0500 191) 
8df409dc (Jason Choi     2023-11-29 17:36:22 -0500 192) .fileButton:not(:last-child) {
c13db9a8 (Jason Choi     2023-11-29 17:56:07 -0500 193)   border-right: 1px solid #ccc;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 194) }
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 195) 
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 196) .fileName {
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 197)   display: block;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 198) }
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 199) 
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 200) .deleteText {
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 201)   display: none;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 202) }
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 203) 
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 204) .fileButton:hover .fileName {
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 205)   display: none;
3145c622 (Jason Choi     2023-11-27 13:20:03 -0500 206) }
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 207) 
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 208) .fileButton:hover .deleteText {
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 209)   display: block;
002a0147 (Jason Choi     2023-11-29 16:46:33 -0500 210) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) .border {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2)     background-color: #43434f;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3)     height: 4px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4)     width: 100vw;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) .box {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   color: #ecf0ff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   border: 4px solid #43434f;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   border-radius: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   background-color: #2f3137;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   padding: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   margin: 50px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) First, run the development server:
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) ```bash
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) npm run dev
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) # or
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9) yarn dev
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) # or
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13) pnpm dev
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15) # or
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17) bun dev
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19) ```
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21) Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23) You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25) This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import Navbar from 'components/LandingPageNavbar';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import styles from 'app/documentation/page.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import MarkdownContent from 'components/Markdown';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) import documentationFile from 'app/documentation/documentation.md';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) import contributorFile from 'app/documentation/contributor.md';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) export default function Documentation() {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   return (
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)     // <body style={{ backgroundColor: '#191825' }}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)     //   <Navbar />
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)     //   <div className={styles.border} />
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)     //   <div className={styles.box}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)     //     <MarkdownContent>{contributorFile}</MarkdownContent>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)     //   </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)     //   </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)     // </body>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)     <p>hi</p>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19) }
Binary file (standard input) matches
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 1) wefqwefqwe
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  1) // App.tsx
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  2) 'use client';
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  3) import React, { useState, useCallback } from 'react';
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  4) import FileParser from '../../components/ParseFile'; // Adjust the import path as needed
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  5) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  6) export default function App() {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  7)   const [files, setFiles] = useState<File[]>([]);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  8)   const [fileContents, setFileContents] = useState<string[]>([]);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500  9) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 10)   const handleDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 11)     event.preventDefault();
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 12)   }, []);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 13) 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 14)   const handleDrop = useCallback((event: React.DragEvent<HTMLDivElement>) => {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 15)     event.preventDefault();
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 16)     const droppedFiles = event.dataTransfer.files;
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 17)     if (droppedFiles.length) {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 18)       const validFiles = Array.from(droppedFiles).filter(file => 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 19)         ['application/json', 'text/plain'].includes(file.type) // Filter supported file types
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 20)       );
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 21)       setFiles(prevFiles => [...prevFiles, ...validFiles]);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 22)       readFiles(validFiles);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 23)     }
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 24)   }, []);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 25)   const readFiles = (files: File[]) => {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 26)     files.forEach(file => {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 27)       const reader = new FileReader();
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 28)       reader.onload = (e) => {
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 29)         const text = e.target?.result;
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 30)         setFileContents(prevContents => [...prevContents, text as string]);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 31)       };
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 32)       reader.readAsText(file);
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 33)     });
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 34)   };
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 35)   return (
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 36)     <div>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 37)       <div 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 38)         id="drop-area" 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 39)         onDragOver={handleDragOver} 
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 40)         onDrop={handleDrop}
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 41)         style={{ border: '2px dashed #ccc', padding: '20px', textAlign: 'center' }}
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 42)       >
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 43)         Drag and drop a file here
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 44)       </div>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 45)       <div id="file-list" style={{ marginTop: '20px' }}>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 46)         <ul>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 47)           {files.map((file, index) => (
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 48)             <li key={index}>{file.name}</li>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 49)           ))}
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 50)         </ul>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 51)       </div>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 52)       <div id="output" style={{ marginTop: '20px' }}>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 53)         {fileContents.map((content, index) => (
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 54)           <pre key={index}>{content}</pre>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 55)         ))}
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 56)       </div>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 57)     </div>
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 58)   );
76910478 (Jason Choi 2023-11-27 11:50:34 -0500 59) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 1) .main {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 2)   overflow: hidden;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 3)   width: 100vw;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 4)   height: 100vh;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 5)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 6)   z-index: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 7)   position: relative;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 8)   background-color: #d9d9d9;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 9) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) 'use client';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import React, { useState } from 'react';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import ChatBox from 'components/ChatBox';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) import styles from 'app/chat/page.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) import NavBar from 'components/ChatPageNavbar';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) import navBarCSS from 'components/ChatPageNavbar/index.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) export default function Chat({ params, children }) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   const id = params.id;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   const [isSidebarOpen, setIsSidebarOpen] = useState(true);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   const toggleSidebar = () => {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)     setIsSidebarOpen(!isSidebarOpen);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)   };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)   return (
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)     <main className={styles.main}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)       <div className={`${navBarCSS.sidebar} ${!isSidebarOpen ? navBarCSS.sidebarclosed : ''}`}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)         <NavBar />
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)       </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)       <ChatBox toggleSidebar={toggleSidebar} isSidebarOpen={isSidebarOpen}>{children}</ChatBox>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)     </main>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) 'use client';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import React, { useState } from 'react';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import ChatBox from 'components/ChatBox';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) import styles from 'app/chat/page.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) import NavBar from 'components/ChatPageNavbar';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) import navBarCSS from 'components/ChatPageNavbar/index.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) export default function Chat({ params, children }) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   const id = params.id;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   const [isSidebarOpen, setIsSidebarOpen] = useState(true);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   const toggleSidebar = () => {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)     setIsSidebarOpen(!isSidebarOpen);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)   };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)   return (
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)     <main className={styles.main}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)       <div className={`${navBarCSS.sidebar} ${!isSidebarOpen ? navBarCSS.sidebarclosed : ''}`}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)         <NavBar />
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)       </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)       <ChatBox toggleSidebar={toggleSidebar} isSidebarOpen={isSidebarOpen}>{children}</ChatBox>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)     </main>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import { PalmAiApiWrapper } from 'app/api/aiApiWrapper/PalmAiApiWrapper';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import summarize from 'app/api/webScraper/summarize';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import webScraper from 'app/api/webScraper/webScraper';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) import MarkdownContent from 'components/Markdown';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) export default async function WebTest() {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)   const content = await webScraper(
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)     'https://www.geeksforgeeks.org/introduction-to-hashing-data-structure-and-algorithm-tutorials/?ref=ghm',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   const summary = await summarize(PalmAiApiWrapper, content);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   return <MarkdownContent>{summary}</MarkdownContent>;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 1) .container {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 2)     min-height: 100vh;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 3)     background-color: inherit;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 4)     display: flex;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 5)     flex-wrap: wrap;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 6)     justify-content: center;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 7)     gap: 20px;
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 8) }
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  1) 'use client';
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  2) import Card from '../../components/Cards';
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  3) import styles from './cards.module.css';
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  4) 
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  5) export default function Page() {
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  6)   return (
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600  7)     <div className={styles.container}>
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  8)       <Card title="Long Body" body="Example Body Text 1 wefwqefqwefqwefwkefhiqweoiqgroiqegrpiqgroiqregoqiyre goqirg oqiur goqir goqirgoqirg oqirgoqirgowqefefqoweu hou hefoquwefoqiuehofqu weoiuhwe oihewofu hqwioefh oiqweuhfioqhwe oihqwioe" />
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600  9)       <Card title="Normal" body="Example Body Text 2" />
650ac96c (Jason Choi 2023-11-22 19:13:38 -0600 10)       <Card title="Really Long Title and No Body" body="" />
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 11)     </div>
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 12)   );
065585d0 (Jason Choi 2023-11-22 18:51:20 -0600 13) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   1) .border {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   2)   background-color: #43434f;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   3)   height: 4px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   4)   width: 100vw;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   5) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   6) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   7) .navbar {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   8)   background-color: #191825;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500   9)   color: #fff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  10)   padding: 1rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  11) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  12) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  13) .container {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  14)   max-width: 90vw;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  15)   margin: 0 auto;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  16)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  17)   justify-content: space-between;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  18)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  19) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  20) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  21) .left {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  22)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  23)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  24) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  25) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  26) .brand a {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  27)   color: #e6fffc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  28)   text-decoration: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  29)   font-weight: bold;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  30)   font-size: 2.25rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  31) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  32) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  33) .right {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  34)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  35)   gap: 40px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  36)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  37) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  38) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  39) .action {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  40)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  41)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  42) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  43) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  44) .action a {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  45)   color: #e6fffc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  46)   text-decoration: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  47)   font-weight: bold;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  48)   font-size: 1.25rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  49) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  50) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  51) .action a:hover {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  52)   text-decoration: underline;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  53) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  54) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  55) .documentation {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  56)   background-color: #43434f;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  57) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  58) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  59) .account {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  60)   background-color: #865dff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  61) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  62) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  63) .button {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  64)   border-radius: 12px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  65)   color: #fff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  66)   border: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  67)   padding: 0.5rem 1rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  68)   font-weight: bold;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  69)   font-size: 1rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  70)   cursor: pointer;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  71) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  72) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  73) .button:hover {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  74)   text-decoration: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  75) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  76) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  77) .iconTextContainer {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  78)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  79)   align-items: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  80)   justify-content: flex-start;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  81) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  82) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  83) .icon {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  84)   margin-left: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  85) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  86) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  87) .content {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  88)   flex-grow: 1;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  89)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  90)   flex-direction: column;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  91)   gap: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  92)   align-items: flex-start;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  93)   justify-content: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  94)   max-width: 40vw;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  95)   padding-left: 5vw;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  96)   background-color: transparent;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  97) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  98) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  99) .containerText {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 100)   color: #e6fffc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 101) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) .border {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2)     background-color: #43434f;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3)     height: 4px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4)     width: 100vw;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) .box {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   color: #ecf0ff;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   border: 4px solid #43434f;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   border-radius: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   background-color: #2f3137;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   padding: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   margin: 50px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) // 'use client';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import fs from 'fs';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import { notFound } from 'next/navigation';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) import styles from 'app/docs/[slug]/page.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) import LandingPageNavbar from 'components/LandingPageNavbar';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) import MarkdownContent from 'components/Markdown';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) function getDoc(slug: string): string {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   const file = `./docs/${slug}.md`;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   if (!fs.existsSync(file)) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)     return '';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)   return fs.readFileSync(file, 'utf-8');
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17) interface DocsProps {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)   params: {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)     slug: string;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)   };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23) export default function Docs({ params }: DocsProps) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)   const doc = getDoc(params.slug);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)   if (!doc) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)     return notFound();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)   return (
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)     <body style={{ backgroundColor: '#191825' }}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32)       <LandingPageNavbar/>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33)       <div className={styles.border}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34)         <div className={styles.box}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35)           <MarkdownContent>{doc}</MarkdownContent>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 36)         </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 37)       </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 38)     </body>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 39)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 40) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) .responseText {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2)   color: black;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3)   font-size: 1rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) .main {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)   overflow: hidden;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   width: 100vw;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   height: 100vh;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   z-index: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   position: relative;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   background-color: #d9d9d9;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16) .sidebar {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)   width: 260px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)   background-color: #191825;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)   height: 100vh;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22) .chatSection {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)   overflow-y: auto;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)   width: calc(100% - 260px);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)   justify-content: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)   align-items: end;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30) .inputContainer {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32)   margin-top: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35) .inputBox ChatBox {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 36)   flex: 1;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 37)   padding: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 38)   border: 1px solid #ccc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 39)   border-radius: 5px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 40)   outline: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 41) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 42) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 43) .chatScroll {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 44)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 45)   overflow-y: auto;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 46)   flex-direction: column;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 47) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 48) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 49) /*input{
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 50)   flex: 1;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 51)   padding: 5px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 52)   border: 1px solid #ccc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 53)   border-radius: 5px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 54) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 55) }*/
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 56) .container {
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 57)   min-height: 100vh;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 58)   background-color: inherit;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 59)   display: flex;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 60)   flex-wrap: wrap;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 61)   justify-content: center;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 62)   gap: 20px;
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 63) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) 'use client';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import ChatBox from 'components/ChatBox';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import ProjectPrompts from 'components/ProjectPrompts';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) import styles from 'app/chat/page.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) export default function Chat() {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)   return (
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600  8)     <div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)         <ProjectPrompts />
3961a4c4 (Jason Choi 2023-11-23 00:43:39 -0600 10)     </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import './globals.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import type { Metadata } from 'next';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import { Inter } from 'next/font/google';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) import ClientSessionProvider from 'components/ClientSessionProvider';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) const inter = Inter({ subsets: ['latin'] });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) export const metadata: Metadata = {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   title: 'recurseAI',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10) };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) export default function RootLayout({
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   children,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) }: {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)   children: React.ReactNode;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16) }) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)   return (
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)     <html lang="en">
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)       <body className={inter.className}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)         <ClientSessionProvider>{children}</ClientSessionProvider>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)       </body>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)     </html>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 1) /* eslint-disable @typescript-eslint/no-unsafe-assignment */
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 2) import NextAuth from 'next-auth';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 3) import { options } from 'app/api/auth/[...nextauth]/options';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 4) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 5) const handler = NextAuth(options);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 6) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 7) export { handler as GET, handler as POST };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import { NextAuthOptions } from 'next-auth';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import GoogleProvider from 'next-auth/providers/google';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) export const options: NextAuthOptions = {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)   providers: [
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)     GoogleProvider({
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)       clientId: process.env.GOOGLE_CLIENT_ID as string,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)       clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)     }),
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   ]
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) // Import the functions you need from the SDKs you need
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import { initializeApp } from 'firebase/app';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import { getAuth, GoogleAuthProvider } from 'firebase/auth';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) // https://firebase.google.com/docs/web/setup#available-libraries
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18) // Initialize Firebase
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19) const app = initializeApp(firebaseConfig);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21) // Get Auth instance
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22) const auth = getAuth(app);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24) // Initialize GoogleAuthProvider
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25) const googleProvider = new GoogleAuthProvider();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27) export { auth, googleProvider };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 1) export abstract class AiApiWrapper {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 2)   abstract prompt(messages: string[]): Promise<string>;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 3) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import { AiApiWrapper } from 'app/api/aiApiWrapper/AiApiWrapper';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import { DiscussServiceClient } from '@google-ai/generativelanguage';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import { GoogleAuth } from 'google-auth-library';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) export class PalmAiApiWrapper extends AiApiWrapper {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)   private MODEL_NAME = 'models/chat-bison-001';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)   private PALMAI_KEY = process.env.PALMAI_KEY || '';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   private TEMPERATURE = 0.5;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   private CANDIDATE_COUNT = 1;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   private client: DiscussServiceClient;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   constructor() {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)     super();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)     this.client = new DiscussServiceClient({
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)       authClient: new GoogleAuth().fromAPIKey(this.PALMAI_KEY),
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)     });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)   async prompt(messages: string[]): Promise<string> {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)     const normalized_messages = messages.map((msg) => ({ content: msg }));
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)     const result = await this.client.generateMessage({
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)       model: this.MODEL_NAME,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)       temperature: this.TEMPERATURE,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)       candidateCount: this.CANDIDATE_COUNT,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)       prompt: {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)         messages: normalized_messages,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)       },
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)     });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)     return result?.[0]?.candidates?.[0]?.content ?? 'Error generating message.';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import puppeteer from 'puppeteer';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) /**
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4)  * @description Goes to the specified URL and returns an
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)  * HTML representation of the page as a string.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)  *
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)  * @param url A URL to a website that begins with an valid scheme
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)  * (e.g., http://, https://).
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)  *
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)  * @returns The content of the website as a `Promise<string>`.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)  */
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) export default async function webScraper(url: string): Promise<string> {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   const browser = await puppeteer.launch({ headless: 'new' });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)   const page = await browser.newPage();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)   // Go to url and scrape content
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)   await page.goto(url);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)   const res = await page.content();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)   // Close browser and return data
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)   await browser.close();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)   return res;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import { AiApiWrapper } from 'app/api/aiApiWrapper/AiApiWrapper';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import * as cheerio from 'cheerio';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) /**
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)  * @description Summarizes any content given the content as a string.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)  *
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)  * @param aiWrapper An AiApiWrapper class.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)  * @param content Content to summarize.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)  * @returns A summary of the content as a `Promise<string>`.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)  */
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) export default async function summarize(
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   aiWrapper: new () => AiApiWrapper,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   content: string,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) ): Promise<string> {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)   const ai = new aiWrapper();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)   // Create prompt and shorten the prompt
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)   const prompt =
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)     'Summarize the content of following HTML page. Do not mention anything about the HTML or how the page is formatted.\n';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)   const normalized_content = prompt + normalizeContent(content);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)   const shortened_content = shortenContent(normalized_content, 15000); // Max AI can handle is 20k bytes for payload.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)   // Summarize using AI
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)   const res = await ai.prompt([shortened_content]);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)   return res;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28) /**
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29)  * @description Normalizes HTML content by removing any non-text content.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)  *
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)  * @param content Content to normalize.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32)  * @returns Normalized content as a `string`.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33)  */
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34) function normalizeContent(content: string): string {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35)   let normalized_content;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 36)   const $ = cheerio.load(content);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 37) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 38)   // Remove any HTML tags that are not text content.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 39)   $('script').remove();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 40)   $('img').remove();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 41)   normalized_content = $.root().text();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 42) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 43)   // Remove excessive whitespace (eats up token count).
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 44)   normalized_content = normalized_content.replace(/\s+/g, ' ');
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 45) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 46)   return normalized_content;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 47) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 48) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 49) /**
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 50)  * @description Shortens content to max_size an AI's API can handle.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 51)  * Substring cannot be used as Unicode characters have variable byte sizes.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 52)  *
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 53)  * @param content Content to be shortened.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 54)  * @param max_size Maximum number of bytes in resulting string.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 55)  * @returns Shortened content as a `string`.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 56)  */
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 57) function shortenContent(content: string, max_size: number): string {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 58)   let shortened_content = '';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 59)   const encoder = new TextEncoder();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 60) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 61)   for (const char of content) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 62)     const size = encoder.encode(shortened_content + char).length;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 63)     if (size > max_size) break;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 64) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 65)     shortened_content += char;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 66)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 67) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 68)   return shortened_content;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 69) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) 'use server';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import { PalmAiApiWrapper } from 'app/api/aiApiWrapper/PalmAiApiWrapper';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) export async function fetchData(inputData: string[]) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)   console.log(
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)     '--------------------------------------------------------------------------------------------',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   console.log('INPUT DATA: ', inputData);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   const x = new PalmAiApiWrapper();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   const res = await x.prompt(inputData);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   console.log(res);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   return res;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   // add data to database for regeneration and selecting point of entry for prompts
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 1) import { Firestore } from '@google-cloud/firestore';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 2) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 3) const firestore = new Firestore({
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 4)   projectId: 'recurseai-b9e9c',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 5)   keyFilename:
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 7) });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 8) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 9) export default firestore;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import firestore from 'app/api/dbAccess/Firestore';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import { Timestamp, FieldValue } from '@google-cloud/firestore';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) interface MessageData {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)   author: 'User' | 'AI';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)   versionsOfMessages: VersionOfMessage[];
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9) interface VersionOfMessage {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   sentTime: Timestamp;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   content: string;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) async function addMessageToChat(
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)   chatId: string,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)   author: 'User' | 'AI',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17) ): Promise<string> {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)   const messageData: MessageData = {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)     author: author,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)     versionsOfMessages: [],
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)   };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)   const messageRef = await firestore.collection('messages').add(messageData);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)   await firestore
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)     .collection('chats')
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)     .doc(chatId)
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)     .update({
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29)       messages: FieldValue.arrayUnion(messageRef.id),
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)       lastUsedDate: Timestamp.now(),
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)     });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33)   return messageRef.id;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 36) export { addMessageToChat };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import { NextApiRequest, NextApiResponse } from 'next';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import { createNewChat } from 'app/api/dbAccess/chatWrite';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) export default async function handler(
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)   req: NextApiRequest,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)   res: NextApiResponse,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) ): Promise<void> {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   try {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)     if (req.method === 'POST') {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)       const chatId = await createNewChat();
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)       res.status(200).json({ chatId });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)     } else if (req.method === 'GET') {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)       res.status(200).json({ message: 'Chat API Endpoint' });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)     } else {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)       res.status(405).end(); // Method Not Allowed
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)     }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)   } catch (error: unknown) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)     console.error(error);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)     res.status(500).json({ error: 'Internal Server Error' });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import type { NextApiRequest, NextApiResponse } from 'next';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import { addMessageToChat } from 'app/api/dbAccess/messageWrite';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) // Define the expected request body type
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) interface MessageBody {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)   author: 'User' | 'AI';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9) export default async function handler(
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   req: NextApiRequest,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   res: NextApiResponse,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) ) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   try {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)     if (req.method === 'POST') {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)       const { author } = req.body as MessageBody;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)       const chatId = req.query.chatId as string;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)       // Validate chatId and author
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)       if (
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)         typeof chatId !== 'string' ||
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)         !(author === 'User' || author === 'AI')
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)       ) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)         return res.status(400).json({ error: 'Invalid input' });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)       }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)       const messageId = await addMessageToChat(chatId, author);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)       return res.status(200).json({ messageId });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)     }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)     return res.status(405).end(); // Method Not Allowed
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)   } catch (error) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32)     console.error(error);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33)     return res.status(500).json({ error: 'Internal Server Error' });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) // Import Next.js types
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import type { NextApiRequest, NextApiResponse } from 'next';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import { addVersionToMessage } from 'app/api/dbAccess/versionWrite'; // Adjust path as needed
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) // Define the expected request body type
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) interface VersionBody {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)   messageId: string;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   content: string;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) export default async function handler(
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   req: NextApiRequest,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   res: NextApiResponse,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) ) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)   try {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)     if (req.method === 'POST') {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)       // Validate and cast the request body
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)       const { messageId, content } = req.body as VersionBody;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)       // Basic input validation
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)       if (typeof messageId !== 'string' || typeof content !== 'string') {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)         return res.status(400).json({ error: 'Invalid input' });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)       }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)       const versionId = await addVersionToMessage(messageId, content);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)       return res.status(200).json({ versionId });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)     }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29)     return res.status(405).end(); // Method Not Allowed
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)   } catch (error) {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)     console.error(error);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32)     return res.status(500).json({ error: 'Internal Server Error' });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33)   }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import firestore from 'app/api/dbAccess/Firestore';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import { Timestamp } from '@google-cloud/firestore';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) interface VersionOfMessage {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)   sentTime: Timestamp;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)   content: string;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9) interface Message {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   author: 'User' | 'AI';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   versionsOfMessages: VersionOfMessage[];
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14) interface ChatData {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)   dateCreated: Timestamp;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)   lastUsedDate: Timestamp;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)   messages: Message[];
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20) async function createNewChat(): Promise<string> {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)   const chatData: ChatData = {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)     dateCreated: Timestamp.now(),
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)     lastUsedDate: Timestamp.now(),
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)     messages: [],
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)   };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)   const chatRef = await firestore.collection('chats').add(chatData);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)   return chatRef.id; // Returns the ID of the newly created chat.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31) export { createNewChat };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import firestore from 'app/api/dbAccess/Firestore';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import { Timestamp, FieldValue } from '@google-cloud/firestore';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) async function addVersionToMessage(
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)   messageId: string,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)   content: string,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) ): Promise<string> {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   const versionData = {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)     sentTime: Timestamp.now(),
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)     content: content,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   const versionRef = await firestore
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)     .collection('versionsOfMessages')
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)     .add(versionData);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)   await firestore
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)     .collection('messages')
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)     .doc(messageId)
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)     .update({
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)       versionsOfMessages: FieldValue.arrayUnion(versionRef.id),
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22)     });
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)   return versionRef.id; // Returns the ID of the newly added version.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27) export { addVersionToMessage };
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) 'use client';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) import styles from 'app/page.module.css';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) import Navbar from 'components/LandingPageNavbar';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4) import Link from 'next/link';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) export default function Home() {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)   return (
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)     <body
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)       style={{
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)         backgroundImage:
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)           'linear-gradient(180deg, rgba(217, 217, 217, 0) 0%, rgba(214.52, 213.96, 216.02, 0.02) 68%, rgba(98, 71, 170, 0.76) 100%)',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)         backgroundColor: '#191825',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)         height: '100vh',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)         display: 'flex',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)         flexDirection: 'column',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)         overflowY: 'hidden',
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16)       }}
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17)     >
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18)       <div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)         <Navbar />
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)         <div className={styles.border} />
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)       </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23)       <div className={styles.content}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24)         <div className={styles.containerText} style={{ fontSize: '40px' }}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)           <div className={styles.action}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)             <div className={`${styles.button} ${styles.account}`}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)               <Link href="/chat">
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)                 <span className={styles.iconTextContainer}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29)                   Try Now
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30)                   <svg
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31)                     xmlns="http://www.w3.org/2000/svg"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32)                     width="30"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33)                     height="30"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34)                     viewBox="0 0 30 30"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35)                     fill="none"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 36)                     className={styles.icon}
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 37)                   >
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 38)                     <path
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 39)                       d="M3.75 11.25V6.75C3.75 5.09315 5.09315 3.75 6.75 3.75H23.25C24.9069 3.75 26.25 5.09315 26.25 6.75V23.25C26.25 24.9069 24.9069 26.25 23.25 26.25H18.75"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 40)                       stroke="#FFA3FD"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 41)                       strokeWidth="2"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 42)                       strokeLinecap="round"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 43)                     />
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 44)                     <path
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 45)                       d="M20 10V9H21V10H20ZM12.5821 18.8321C12.1916 19.2226 11.5584 19.2226 11.1679 18.8321C10.7774 18.4416 10.7774 17.8084 11.1679 17.4179L12.5821 18.8321ZM19 17.5V10H21V17.5H19ZM20 11H12.5V9H20V11ZM20.7071 10.7071L12.5821 18.8321L11.1679 17.4179L19.2929 9.29289L20.7071 10.7071Z"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 46)                       fill="#FFA3FD"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 47)                     />
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 48)                     <rect
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 49)                       x="3.75"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 50)                       y="17.5"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 51)                       width="8.75"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 52)                       height="8.75"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 53)                       rx="2"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 54)                       stroke="#FFA3FD"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 55)                       strokeWidth="2"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 56)                       strokeLinecap="round"
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 57)                     />
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 58)                   </svg>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 59)                 </span>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 60)               </Link>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 61)             </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 62)           </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 63)           Ask Away with RecurseAI
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 64)         </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 65) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 66)         <div className={styles.containerText} style={{ fontSize: '20px' }}>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 67)           RecurseAI aims to transform PaLM 2 into a project focused,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 68)           self-prompting language model that can autonomously complete complex
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 69)           tasks and goals with the aid and guidance of the user. By enabling
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 70)           PaLM 2 to reprompt itself, RecurseAI allows for an extremely
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 71)           functional, goal focused AI to meet your demands.
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 72)         </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 73)       </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 74)     </body>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 75)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 76) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) :root {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2)   --max-width: 100vh;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3)   --border-radius: 12px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4)   --font-mono: 'Roboto Mono';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) html,
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) body {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)   margin: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   padding: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   height: 100vh;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) .responseText {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4)   color: black;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)   font-size: 1rem;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8) .main {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)   overflow: hidden;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)   width: 100vw;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)   height: 100vh;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13)   z-index: 0;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 14)   position: relative;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 15)   background-color: #d9d9d9;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 16) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 17) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 18) .sidebar {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 19)   width: 260px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 20)   background-color: #191825;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 21)   height: 100vh;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 22) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 23) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 24) .chatSection {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 25)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 26)   overflow-y: auto;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 27)   width: calc(100% - 260px);
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 28)   justify-content: center;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 29)   align-items: end;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 30) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 31) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 32) .inputContainer{
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 33)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 34)   margin-top: 10px
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 35) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 36) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 37) .inputBox ChatBox{
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 38)   flex: 1;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 39)   padding: 10px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 40)   border: 1px solid #ccc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 41)   border-radius: 5px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 42)   outline: none;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 43) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 44) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 45) .chatScroll {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 46)   display: flex;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 47)   overflow-y: auto;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 48)   flex-direction: column;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 49) }
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 50) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 51) /*input{
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 52)   flex: 1;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 53)   padding: 5px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 54)   border: 1px solid #ccc;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 55)   border-radius: 5px;
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 56) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 57) }*/
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  1) import React from 'react';
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  2) 
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  3) export default function NotFound() {
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  4)   return (
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  5)     <main>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  6)       <div className="error-container">
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  7)         <img src="..\images\error404Smiley.png" alt="Upside-Down Smiley Face" />
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  8)         <h1>Error 404: This page does not exist!</h1>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500  9)         <p>The page you're looking for seems to be missing or broken. We apologize for the inconvenience.</p>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 10)       </div>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 11)     </main>
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 12)   );
^38079ad (Jason Choi 2023-11-15 07:55:37 -0500 13) }
